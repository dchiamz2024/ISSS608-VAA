---
title: "Take-Home Exercise 1"
author: "David Chiam"
description: ""
date: "1 May 2025"
date-modified: "3 May 2025"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **1. Overview**

## **Setting the scene**

A local online media company that publishes daily content on digital platforms is planning to release an article on **demographic structures and distribution of Singapore in 2024**.

## **Our task**

In this exercise, Exploratory Data Analysis (EDA) methods and ggplot functions are used to explore:

1.  Need to write something here

2.  and here

# **2. Getting started, Data Loading and Preparation**

This section documents the process of preparing the dataset for analysis and visualization. It covers the loading of R packages, initial inspection of the dataset, and the necessary wrangling and transformation steps applied.

### **2.1 Load required packages üì¶**

Before importing the data, we load several R packages from the **tidyverse** ecosystem and supporting libraries for data wrangling and visualization. These packages streamline data processing and produce publication-ready plots using `ggplot2`. This setup ensure that we have both the flexibility and power to craft expressive, publication-quality demographic visualizations for the report.

üìå **Summary of Package Roles**

| Library | Description |
|--------------------------|----------------------------------------------|
| [**tidyverse**](https://www.tidyverse.org/) | A collection of core packages designed for data science, used extensively for data preparation and wrangling |
| [**knitr**](https://yihui.org/knitr/) | Generates dynamic R markdown or Quarto reports |
| [**patchwork**](https://patchwork.data-imaginist.com/) | Combine multiple ggplots into a single layout |
| [**ggthemes**](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) | Provides extra themes (e.g. economist, wsj) |
| [**scales**](https://scales.r-lib.org/) | For data/axes label formatting and annotations for ggplot2 |
| [**ggtext**](https://wilkelab.org/ggtext/) | Supports improved and rich text rendering for ggplot2 |
| [**ggalt**](https://yonicd.github.io/ggalt/) | A compendium of ‚Äògeoms‚Äô, ‚Äòcoords‚Äô, ‚Äòstats‚Äô, scales and fonts for ggplots2 |
| [**ggridges**](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html) | For ridgeline plots that create the impression of a mountain range. They can be useful for visualising changes in distributions over time or space. |
| [**ggpubr**](https://github.com/kassambara/ggpubr) | For publication-ready plots. |
| [**ggextra**](https://github.com/daattali/ggExtra) | For adding marginal plots to ggplot2 |
| [**cowplot**](https://github.com/wilkelab/cowplot) | Provides precise figure alignment and plot annotation |
| [**ggnewscale**](https://eliocamp.github.io/ggnewscale/) | Enables multiple fill/colour scales in a single plot. For defining scales in ggplot2. |
| ggrepel |  |

We load the following R packages using the `pacman::p_load()` :

```{r}

pacman::p_load(
  tidyverse,     # Core data manipulation and ggplot2 plotting
  knitr,         # Dynamic report generation and rendering
  patchwork,     # Combines multiple ggplot2 plots
  ggthemes,      # Additional themes and visual styles
  scales,        # Formatting axes, scales, and labels
  ggtext,        # Rich text formatting in ggplot titles/labels
  ggalt,         # Dumbbell, lollipop, and other advanced geoms
  ggridges,      # Ridgeline plots to visualize distributions
  ggpubr,        # Publication-ready ggplot2 enhancements
  ggExtra,       # Marginal plots for added insight
  cowplot,       # Publication-quality figure alignment
  ggnewscale,    # Allows multiple color/fill scales in one ggplot
  ggrepel        # Allows
)
```

### **2.2** Loading the Data and Taking a Glimpse of the Dataset **üìÇ**

The dataset, *Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024*, published by the [Department of Statistics, Singapore (DOS)](https://www.singstat.gov.sg/) was loaded using the `read_csv()` function from the `readr` package in the tidyverse collection.

```{r}

# Load the dataset
df <- read_csv("Dataset/respopagesex2024.csv")

```

The dataset contains **60,424 rows** and **6 columns**. Each row represents the count of residents for a specific combination of planning area, subzone, age, sex, and year.

```{r}

glimpse(df)
```

üßæ **Variable Descriptions**

| Column | Type | Description |
|------------------|------------------------|------------------------------|
| `PA` | Categorical | Planning Area (e.g., Ang Mo Kio, Bedok) |
| `SZ` | Categorical | Subzone within each Planning Area |
| `Age` | Categorical (to be converted) | Age in single years (e.g., 0‚Äì100+) |
| `Sex` | Categorical | Gender: Male / Female |
| `Pop` | Continuous (Integer) | Number of residents (rounded to nearest 10) |
| `Time` | Identifier / Constant | Time period (always 2024 in this dataset) |

### **2.3** **Wrangling, Cleaning & Transformation üßπ**

To ensure the data is ready for exploratory visualization and demographic analysis, a series of wrangling and transformation steps are applied. These steps are logically grouped and reusable across multiple visualization tasks.

#### ‚úÖ Convert **`Age`** to Integer

The `Age` column is stored as a character string (e.g., `"100+"`), which can prevent proper sorting, numeric comparisons, and calculations. I converted it to an integer, coercing `"100+"` to `100`, and remove any missing or malformed entries.

This step ensures that age values are usable in:

-   Population pyramids
-   Median age calculations
-   Age band groupings

```{r}

df <- df %>%
  mutate(Age = as.integer(Age)) %>%  # Convert to numeric (100+ becomes NA)
  drop_na(Age)                       # Remove missing values caused by conversion


```

#### ‚úÖ Create `AgeBand` for Grouped Analysis

Working with 101 separate age values (0‚Äì100) may clutter visualizations and dilute insight. Therefore, I bin the ages into meaningful age bands for easier demographic comparison and comparative visualization. These age bands are especially helpful for:

-   Grouped bar charts
-   Age structure comparisons across planning areas

```{r}

df <- df %>%
  mutate(AgeBand = cut(Age,
    breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55,
               60, 65, 70, 75, 80, 85, 90, 95, 100, Inf),
    labels = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29",
               "30-34", "35-39", "40-44", "45-49", "50-54",
               "55-59", "60-64", "65-69", "70-74", "75-79",
               "80-84", "85-89", "90-94", "95-99", "100+"),
    right = FALSE))

```

#### ‚úÖ Aggregate for Exploratory Plots & Key Insights

The data was group by Planning Area, Sex, and Age Band to prepare for visual comparisons across demographic segments. Using the code below, we can compute the **aggregated population totals** across:

-   **Age √ó Sex**: for national pyramids
-   **Planning Area**: for ranking and spatial comparisons

```{r}

# For population pyramid (Age-Sex)
pyramid_data <- df %>%
  group_by(Age, Sex) %>%
  summarise(Pop = sum(Pop), .groups = "drop")

# For top 5 planning areas
top5_pa <- df %>%
  group_by(PA) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  slice_max(order_by = Pop, n = 5)

```

#### ‚úÖ Add Region Classification Based on Planning Area

To enhance geographical analysis, we classify each Planning Area (`PA`) into one of Singapore‚Äôs five official regions (1) Central, (2) East, (3) North, (4) North-East, and (5) West. This grouping follows Singapore‚Äôs **Urban Redevelopment Authority (URA) Master Plan** and allows for cleaner regional comparisons, faceted plots, and high-level demographic summaries.

```{r}

df <- df %>%
  mutate(
    PA = str_trim(str_to_upper(PA)),
    Region = case_when(
      PA %in% c("BISHAN", "BUKIT MERAH", "BUKIT TIMAH", "CENTRAL AREA", "DOWNTOWN CORE",
                "GEYLANG", "KALLANG", "MARINA EAST", "MARINA SOUTH", "MUSEUM", "NEWTON",
                "NOVENA", "ORCHARD", "OUTRAM", "PAYA LEBAR", "QUEENSTOWN", "RIVER VALLEY",
                "ROCHOR", "SINGAPORE RIVER", "SOUTHERN ISLANDS", "STRAITS VIEW", "TANGLIN",
                "TOA PAYOH", "MARINE PARADE") ~ "Central",
      PA %in% c("BEDOK", "CHANGI", "CHANGI BAY", "PASIR RIS", "TAMPINES") ~ "East",
      PA %in% c("CENTRAL WATER CATCHMENT", "MANDAI", "SEMBABWANG", "SIMPANG",
                "SUNGEI KADUT", "WOODLANDS", "YISHUN", "SEMBAWANG") ~ "North",
      PA %in% c("ANG MO KIO", "HOUGANG", "NORTH-EASTERN ISLANDS", "PUNGGOL",
                "SELETAR", "SENGKANG", "SERANGOON") ~ "North-East",
      PA %in% c("BOON LAY", "BUKIT BATOK", "BUKIT PANJANG", "CHOA CHU KANG",
                "CLEMENTI", "JURONG EAST", "JURONG WEST", "LIM CHU KANG",
                "PIONEER", "TENGAH", "TUAS", "WESTERN ISLANDS",
                "WESTERN WATER CATCHMENT") ~ "West",
      TRUE ~ NA_character_
    )
  )

```

#### ‚úÖ Compute the Weighted Median Age

As the simple median of the `Age` column would be misleading, as it treats each age as equally populated. Instead, we calculate a **weighted median** that reflects **actual population counts** per age to give a statistically more accurate median age for the **entire Singapore resident population**..

```{r}

df_median <- df %>%
  arrange(Age) %>%
  mutate(
    cum_pop = cumsum(Pop),
    total_pop = sum(Pop)
  ) %>%
  filter(cum_pop >= total_pop / 2) %>%
  slice(1)

median_age <- df_median$Age

```

#### ‚úÖ Create Aggregated Summary Table

```{r}

df_summary <- df %>%
  group_by(Region, PA, AgeBand, Sex) %>%
  summarise(Total = sum(Pop), .groups = "drop")

```

# 3. Exploratory Data Analysis (EDA) üìä

### üîç **3.1 What is the age and gender structure in the Singapore resident population?**

**Goal**: Understand whether the population skews young or old, and whether the gender balance is even.

**Method**: Population pyramids using mirrored horizontal bar charts, grouped by sex and age band.

::: panel-tabset
## The Plot

```{r, echo=FALSE}

# Build national_pyramid with label fields
total_pop <- sum(df_summary$Total)

national_pyramid <- df_summary %>%
  mutate(Sex = factor(Sex, levels = c("Males", "Females"))) %>%
  group_by(AgeBand, Sex) %>%
  summarise(Total = sum(Total), .groups = "drop") %>%
  mutate(
    Perc = Total / total_pop * 100,
    Total = if_else(Sex == "Males", -Total, Total),
    Label = paste0(round(Perc, 1), "%"),
    hjust_pos = if_else(Sex == "Males", 1.1, -0.1)
  )


# Plot
ggplot(national_pyramid, 
       aes(x = AgeBand, y = Total, fill = Sex)) +
  geom_bar(stat = "identity") +
  geom_hline(yintercept = 0, color = "black") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#ADD8E6", "Females" = "#FFC0CB"),
    breaks = c("Males", "Females")
  ) +
  scale_y_continuous(
    labels = function(x) comma(abs(x)),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  # Percentage labels with grey background
  geom_label(aes(label = Label, y = 0, hjust = hjust_pos),
             fill = "grey90", color = "grey30", size = 2, alpha = 0.65,
             label.size = NA) +
  labs(
    title = "Singapore Resident Population Pyramid (2024)",
    subtitle = "Mirrored by Gender, Aggregated by Age Bands (with %)",
    y = "Population", x = "Age Band",
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 11)
  )

```

## The Code Chunk

```{r, echo=TRUE, eval=FALSE}

# Build national_pyramid with label fields
total_pop <- sum(df_summary$Total)

national_pyramid <- df_summary %>%
  mutate(Sex = factor(Sex, levels = c("Males", "Females"))) %>%
  group_by(AgeBand, Sex) %>%
  summarise(Total = sum(Total), .groups = "drop") %>%
  mutate(
    Perc = Total / total_pop * 100,
    Total = if_else(Sex == "Males", -Total, Total),
    Label = paste0(round(Perc, 1), "%"),
    hjust_pos = if_else(Sex == "Males", 1.1, -0.1)
  )


# Plot
ggplot(national_pyramid, 
       aes(x = AgeBand, y = Total, fill = Sex)) +
  geom_bar(stat = "identity") +
  geom_hline(yintercept = 0, color = "black") +
  coord_flip() +
  scale_fill_manual(
    values = c("Males" = "#ADD8E6", "Females" = "#FFC0CB"),
    breaks = c("Males", "Females")
  ) +
  scale_y_continuous(
    labels = function(x) comma(abs(x)),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  # Percentage labels with grey background
  geom_label(aes(label = Label, y = 0, hjust = hjust_pos),
             fill = "grey90", color = "grey30", size = 2, alpha = 0.65,
             label.size = NA) +
  labs(
    title = "Singapore Resident Population Pyramid (2024)",
    subtitle = "Mirrored by Gender, Aggregated by Age Bands (with %)",
    y = "Population", x = "Age Band",
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 9),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 10)
  )

```
:::

::: How-Does-it-Work
![](/Images/Insights.png){width="42"} [<strong>Insights gleamed from this plot in section 3.1</strong>]{style="font-size: 30px; vertical-align: middle;"}

This population pyramid reveals the demographic structure of Singapore‚Äôs resident population as of June 2024. The mirrored horizontal bars clearly show that the population is ageing ‚Äî with a substantial share concentrated in the 40‚Äì64 age bands. The gender distribution is broadly balanced across most age groups, although a higher proportion of females is observed in older age bands, reflecting longer female life expectancy. Younger cohorts (under 25) form a smaller share of the population, suggesting lower birth rates and potential long-term shrinkage of the working-age base. This age imbalance, combined with rising median age, has strategic implications for healthcare planning, social security, and labour force renewal. The pyramid‚Äôs symmetry and visual labeling facilitate quick interpretation, while the grey-backed percentage markers offer contextual understanding without clutter. Overall, the chart underscores the demographic transition toward an ageing population ‚Äî a trend aligned with those of other developed urban nations.
:::

### üîç **3.2 How are age groups distributed across the five regions?**

**Goal**: To explore the demographic composition across Singapore‚Äôs five regions using meaningful generational groupings, this visualisation compares the proportion of residents by age cohort. It addresses how youth, workforce, and senior populations differ geographically.

**Method**: Using the 2024 DOS dataset, residents are grouped by region and classified into six age bands based on Singapore‚Äôs social-policy generations: *Alpha & Gen Z (0‚Äì24yo), Young Adults (25‚Äì34yo), Working Adults (35‚Äì54yo), Silver Generation (55‚Äì64yo), Merdeka Generation (65‚Äì74yo), and Pioneer Generation (\>75yo)*. Percentages are calculated within each region and plotted using a colour-safe, perceptually consistent palette to enhance visual clarity and accessibility.

::: panel-tabset
## The Combined Plot

```{r, echo=FALSE, fig.width=12, fig.height=8}

# Data prep with generation bands
df_generations <- df %>%
  mutate(
    AgeGroup = case_when(
      Age <= 24 ~ "Alpha & Gen Z (0-24)",
      Age <= 34 ~ "Young Adults (25-34)",
      Age <= 54 ~ "Working Adults (35-54)",
      Age <= 64 ~ "Silver Generation (55-64)",
      Age <= 74 ~ "Merdeka Generation (65-74)",
      TRUE ~ "Pioneer Generation (>75)"
    ),
    AgeGroup = factor(AgeGroup, levels = c(
      "Alpha & Gen Z (0-24)",
      "Young Adults (25-34)",
      "Working Adults (35-54)",
      "Silver Generation (55-64)",
      "Merdeka Generation (65-74)",
      "Pioneer Generation (>75)"
    ))
  ) %>%
  group_by(Region, AgeGroup) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  group_by(Region) %>%
  mutate(Perc = Pop / sum(Pop) * 100)

# --- Plot A: Count-based ---
plot_counts <- ggplot(df_generations, aes(x = Region, y = Pop, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = comma(Pop)), position = position_stack(vjust = 0.5),
            size = 3, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels
  labs(
    title = "Population Count by Generation",
    subtitle = "Total residents of each generation by region",
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.subtitle = element_text(size = 8)
  )


# --- Plot B: Percentage-based ---
plot_perc <- ggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(Perc, 1), "%")),
            position = position_stack(vjust = 0.5), size =3, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels
  labs(
    title = "Population Share by Generation",
    subtitle = "Proportion of each generation by region",
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.subtitle = element_text(size = 8),
    legend.text = element_text(size = rel(0.7))  # 30% smaller
  )

# Combine plots
plot_counts + plot_perc + plot_layout(guides = "collect") & 
  theme(legend.position = "bottom", legend.text = element_text(size = rel(0.7)))
```

*Toggle to the other tabs to view the clearer version of each plot.*

This visualisation examines the generational distribution of Singapore‚Äôs resident population across the five main planning regions, using both absolute population counts and proportional shares. The left panel highlights the total number of residents in each generation, while the right panel normalises these figures to show the internal demographic mix within each region.

## Population Count by Generation

```{r, echo=FALSE, fig.width=12, fig.height=8}

# Data preparation
df_generations <- df %>%
  mutate(
    AgeGroup = case_when(
      Age <= 24 ~ "Alpha & Gen Z (0-24)",
      Age <= 34 ~ "Young Adults (25-34)",
      Age <= 54 ~ "Working Adults (35-54)",
      Age <= 64 ~ "Silver Generation (55-64)",
      Age <= 74 ~ "Merdeka Generation (65-74)",
      TRUE ~ "Pioneer Generation (>75)"
    ),
    AgeGroup = factor(AgeGroup, levels = c(
      "Alpha & Gen Z (0-24)",
      "Young Adults (25-34)",
      "Working Adults (35-54)",
      "Silver Generation (55-64)",
      "Merdeka Generation (65-74)",
      "Pioneer Generation (>75)"
    ))
  ) %>%
  group_by(Region, AgeGroup) %>%
  summarise(Pop = sum(Pop), .groups = "drop")

# Plot A only
plot_counts <- ggplot(df_generations, aes(x = Region, y = Pop, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = comma(Pop)),
            position = position_stack(vjust = 0.5),
            size = 3.5, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  scale_y_continuous(labels = NULL, breaks = NULL) +  # remove y-axis ticks
  labs(
    title = "Population Count by Generation",
    subtitle = "Total residents of each generation by region",
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(size = 10),
    legend.text = element_text(size = rel(0.8))  # 30% smaller
  )

# Display Plot A
plot_counts


```

## Population Percentage by Generation

```{r, echo=FALSE, fig.width=12, fig.height=8}

# Data preparation
df_generations <- df %>%
  mutate(
    AgeGroup = case_when(
      Age <= 24 ~ "Alpha & Gen Z (0-24)",
      Age <= 34 ~ "Young Adults (25-34)",
      Age <= 54 ~ "Working Adults (35-54)",
      Age <= 64 ~ "Silver Generation (55-64)",
      Age <= 74 ~ "Merdeka Generation (65-74)",
      TRUE ~ "Pioneer Generation (>75)"
    ),
    AgeGroup = factor(AgeGroup, levels = c(
      "Alpha & Gen Z (0-24)",
      "Young Adults (25-34)",
      "Working Adults (35-54)",
      "Silver Generation (55-64)",
      "Merdeka Generation (65-74)",
      "Pioneer Generation (>75)"
    ))
  ) %>%
  group_by(Region, AgeGroup) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  group_by(Region) %>%
  mutate(Perc = Pop / sum(Pop) * 100)

# Plot B only
plot_perc <- ggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(Perc, 1), "%")),
            position = position_stack(vjust = 0.5), size = 3.5, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis ticks
  labs(
    title = "Population Percentage by Generation",
    subtitle = "Proportion of each generation by region",
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(size = 10),
    legend.text = element_text(size = rel(0.8))  # 30% smaller
  )

# Display Plot B
plot_perc


```

## The Code Chunk

```{r, echo=TRUE, eval=FALSE}

# Data prep with generation bands
df_generations <- df %>%
  mutate(
    AgeGroup = case_when(
      Age <= 24 ~ "Alpha & Gen Z (0-24)",
      Age <= 34 ~ "Young Adults (25-34)",
      Age <= 54 ~ "Working Adults (35-54)",
      Age <= 64 ~ "Silver Generation (55-64)",
      Age <= 74 ~ "Merdeka Generation (65-74)",
      TRUE ~ "Pioneer Generation (>75)"
    ),
    AgeGroup = factor(AgeGroup, levels = c(
      "Alpha & Gen Z (0-24)",
      "Young Adults (25-34)",
      "Working Adults (35-54)",
      "Silver Generation (55-64)",
      "Merdeka Generation (65-74)",
      "Pioneer Generation (>75)"
    ))
  ) %>%
  group_by(Region, AgeGroup) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  group_by(Region) %>%
  mutate(Perc = Pop / sum(Pop) * 100)

# --- Plot A: Count-based ---
plot_counts <- ggplot(df_generations, aes(x = Region, y = Pop, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = comma(Pop)), position = position_stack(vjust = 0.5),
            size = 2.2, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels
  labs(
    title = "Population Count by Generation",
    subtitle = "Total residents of each generation by region",
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.subtitle = element_text(size = 8)
  )


# --- Plot B: Percentage-based ---
plot_perc <- ggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(round(Perc, 1), "%")),
            position = position_stack(vjust = 0.5), size =2.2, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels
  labs(
    title = "Population Share by Generation",
    subtitle = "Proportion of each generation by region",
    x = NULL, y = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.subtitle = element_text(size = 8),
    legend.text = element_text(size = rel(0.7))  # 30% smaller
  )

# Combine plots
plot_counts + plot_perc + plot_layout(guides = "collect") & 
  theme(legend.position = "bottom", legend.text = element_text(size = rel(0.7)))

```
:::

```{r, echo=FALSE, fig.width=12}

# Define generation bands
generation_bands <- tibble(
  Gen = c("Alpha & Gen Z", "Young Adults", "Working Adults",
          "Silver Gen", "Merdeka Gen", "Pioneer Gen"),
  Start = c(0, 24, 34, 54, 64, 74),
  End   = c(24, 34, 54, 64, 74, 105),
  Fill  = c("#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462")
)

# Expand dataset
df_expanded <- df %>%
  filter(!is.na(Region)) %>%
  select(Region, Age, Pop) %>%
  slice(rep(1:n(), Pop %/% 10))  # Downsampling for performance

# Compute quartiles per region
stats_labels <- df_expanded %>%
  group_by(Region) %>%
  summarise(
    Q1 = quantile(Age, 0.25),
    Median = median(Age),
    Q3 = quantile(Age, 0.75),
    .groups = "drop"
  ) %>%
  pivot_longer(cols = c(Q1, Median, Q3), names_to = "Type", values_to = "Value") %>%
  mutate(Label = paste0(Type, ": ", round(Value)))

# Plot
ggplot() +
  # Generation bands background
  lapply(1:nrow(generation_bands), function(i) {
    annotate("rect",
             xmin = -Inf, xmax = Inf,
             ymin = generation_bands$Start[i], ymax = generation_bands$End[i],
             fill = generation_bands$Fill[i], alpha = 0.4)
  }) +
  # Boxplot
  geom_boxplot(data = df_expanded, aes(x = Region, y = Age),
               fill = "grey70", color = "black", width = 0.6, outlier.alpha = 0.5) +
  # Quartile annotations with repel
  geom_text_repel(
    data = stats_labels,
    aes(x = Region, y = Value, label = Label),
    size = 3.0,
    color = "#7b7272",
    direction = "y",
    nudge_x = 0.5,
    segment.color = "black"
  ) +
  coord_flip() +
  labs(
    title = "Age Distribution Across Regions",
    subtitle = "Boxplot annotated with regional Q1, Median, and Q3 values",
    x = NULL, y = "Age"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 12),
    axis.text.y = element_text(size = 10),   # ‚Üê Corrected line
    panel.grid.major.y = element_blank()
  )

```

::: How-Does-it-Work
![](/Images/Insights.png){width="42"} [<strong>Insights gleamed from these plots in section 3.2</strong>]{style="font-size: 30px; vertical-align: middle;"}

These visualisations compares Singapore‚Äôs resident population by generation across the five main planning regions, using both absolute ounts (left panel) and proportional shares (right panel). **Working adults (ages 35‚Äì54)** form the largest demographic in all regions, especially in the **East and North**. However, the **Central region** stands out for its **higher concentration of older residents**, particularly from the **Merdeka and Pioneer generations**, both in absolute numbers and as a proportion of its population.

Conversely, the **North-East and West** regions show a higher share of **younger residents under 35**, reflecting newer housing developments and growing family clusters. While younger generations are more evenly spread in these regions, older cohorts are disproportionately concentrated in the **Central, East, and West**.

Supporting this, the **boxplots and age summaries** reveal **higher median ages** and **tighter interquartile ranges** in these ageing regions‚Äîhighlighting a more mature demographic profile that warrants targeted **urban planning, healthcare, and ageing-in-place strategies**.
:::

### üîç **3.3 Which Planning Areas have the most concentration of Young and Working Adults?**

**Goal**:

**Method**:

```{r, echo=FALSE, fig.width=10, fig.height=6}

# Prepare data: Young Adults and Working Adults per PA
df_ywa_single <- df %>%
  filter(Age >= 25, Age <= 54, !is.na(PA)) %>%
  mutate(
    GenCat = case_when(
      Age <= 34 ~ "Young Adults (25‚Äì34)",
      TRUE ~ "Working Adults (35‚Äì54)"
    )
  ) %>%
  group_by(PA, GenCat) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  pivot_wider(names_from = GenCat, values_from = Pop, values_fill = 0) %>%
  mutate(Total = `Young Adults (25‚Äì34)` + `Working Adults (35‚Äì54)`) %>%
  arrange(desc(`Working Adults (35‚Äì54)`)) %>%
  slice(1:15) %>%
  pivot_longer(cols = c(`Young Adults (25‚Äì34)`, `Working Adults (35‚Äì54)`),
               names_to = "GenCat", values_to = "Pop") %>%
  mutate(PA = fct_reorder(PA, -Pop))

# Plot
ggplot(df_ywa_single, aes(x = PA, y = Pop, fill = GenCat)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7) +
  scale_fill_manual(values = c(
    "Young Adults (25‚Äì34)" = "#ffffb3",
    "Working Adults (35‚Äì54)" = "#bebada"
  )) +
  labs(
    title = "Top 15 Planning Areas by Working Adults (35‚Äì54)",
    subtitle = "With Young Adults (25‚Äì34) shown separately",
    x = NULL, y = "Population", fill = NULL
  ) +
  scale_y_continuous(labels = scales::comma) +
  coord_flip() +
  theme_minimal(base_size = 11)




```

```{r, echo=FALSE, fig.width=10, fig.height=8}

# Step 1: Identify top 15 planning areas by 25‚Äì54 age group
df_ywa_single <- df %>%
  filter(Age >= 25, Age <= 54) %>%
  group_by(PA) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  arrange(desc(Pop)) %>%
  slice_head(n = 15)

# Step 2: Filter and summarise gender data
df_gender_pie <- df %>%
  filter(Age >= 25, Age <= 54, PA %in% df_ywa_single$PA) %>%
  group_by(PA, Sex) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  group_by(PA) %>%
  mutate(Percent = Pop / sum(Pop) * 100)

# Step 3: Define color mapping
gender_colors <- c("Males" = "#ADD8E6", "Females" = "#FFC0CB")

# Step 4: Create pie charts per PA
pie_list <- df_gender_pie %>%
  group_split(PA) %>%
  map(~ {
    this_pa <- unique(.x$PA)
    ggplot(.x, aes(x = "", y = Pop, fill = Sex)) +
      geom_bar(stat = "identity", width = 1, color = "white") +
      coord_polar("y") +
      geom_text(aes(label = paste0(round(Percent), "%")),
                position = position_stack(vjust = 0.5),
                size = 3, color = "grey20") +
      scale_fill_manual(values = gender_colors) +
      labs(title = this_pa, x = NULL, y = NULL) +
      theme_void() +
      theme(
        plot.title = element_text(size = 10, hjust = 0.5),
        legend.position = "none"
      )
  })

# Step 5: Legend (separate dummy plot)
legend_plot <- ggplot(df_gender_pie, aes(x = "", y = Pop, fill = Sex)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = gender_colors, name = "Gender") +
  theme_void() +
  theme(legend.position = "top")

# Step 6: Extract legend
shared_legend <- cowplot::get_legend(legend_plot)

# Step 7: Combine pies + legend
final_plot <- (wrap_plots(pie_list, ncol = 5)) / wrap_elements(shared_legend) +
  plot_layout(heights = c(1, 0.1)) +
  plot_annotation(
    title = "Gender Proportion in Top 15 Planning Areas",
    subtitle = "Age group 25‚Äì54: Each pie shows male vs female composition",
    theme = theme(
      plot.title = element_text(face = "bold", size = 14),
      plot.subtitle = element_text(size = 10)
    )
  )

final_plot



```

```{r, echo=FALSE, fig.width=10, fig.height=6}

# Prepare data: Young Adults and Working Adults per PA
df_ywa_single <- df %>%
  filter(Age >= 25, Age <= 54, !is.na(PA)) %>%
  mutate(
    GenCat = case_when(
      Age <= 34 ~ "Young Adults (25‚Äì34)",
      TRUE ~ "Working Adults (35‚Äì54)"
    )
  ) %>%
  group_by(PA, GenCat) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  pivot_wider(names_from = GenCat, values_from = Pop, values_fill = 0) %>%
  mutate(Total = `Young Adults (25‚Äì34)` + `Working Adults (35‚Äì54)`) %>%
  arrange(desc(`Working Adults (35‚Äì54)`)) %>%
  slice(1:15)

# Save ordering based on working adults
pa_order <- df_ywa_single %>%
  arrange(`Working Adults (35‚Äì54)`) %>%
  pull(PA)

# Reshape back to long format for plotting
df_ywa_single_long <- df_ywa_single %>%
  select(PA, `Young Adults (25‚Äì34)`, `Working Adults (35‚Äì54)`) %>%
  pivot_longer(cols = -PA, names_to = "GenCat", values_to = "Pop") %>%
  mutate(PA = factor(PA, levels = pa_order))

# Plot
ggplot(df_ywa_single_long, aes(x = PA, y = Pop, fill = GenCat)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7) +
  scale_fill_manual(values = c(
    "Young Adults (25‚Äì34)" = "#ffffb3",
    "Working Adults (35‚Äì54)" = "#bebada"
  )) +
  labs(
    title = "Top 15 Planning Areas by Working Adults (35‚Äì54)",
    subtitle = "With Young Adults (25‚Äì34) shown separately",
    x = NULL, y = "Population", fill = NULL
  ) +
  scale_y_continuous(labels = scales::comma) +
  coord_flip() +
  theme_minimal(base_size = 11)


```

```{r, echo=FALSE, fig.width=10, fig.height=6}

# Prepare data: Young Adults and Working Adults per PA
df_ywa_single <- df %>%
  filter(Age >= 25, Age <= 54, !is.na(PA)) %>%
  mutate(
    GenCat = case_when(
      Age <= 34 ~ "Young Adults (25‚Äì34)",
      TRUE ~ "Working Adults (35‚Äì54)"
    )
  ) %>%
  group_by(PA, GenCat) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  pivot_wider(names_from = GenCat, values_from = Pop, values_fill = 0) %>%
  mutate(Total = `Young Adults (25‚Äì34)` + `Working Adults (35‚Äì54)`) %>%
  arrange(`Working Adults (35‚Äì54)`) %>%
  slice(1:15)

# Save ordering based on working adults (ascending)
pa_order <- df_ywa_single %>%
  arrange(`Working Adults (35‚Äì54)`) %>%
  pull(PA)

# Reshape back to long format
df_ywa_single_long <- df_ywa_single %>%
  select(PA, `Young Adults (25‚Äì34)`, `Working Adults (35‚Äì54)`) %>%
  pivot_longer(cols = -PA, names_to = "GenCat", values_to = "Pop") %>%
  mutate(
    PA = factor(PA, levels = pa_order),
    GenCat = factor(GenCat, levels = c("Young Adults (25‚Äì34)", "Working Adults (35‚Äì54)"))  # correct stacking/dodge order
  )

# Plot
ggplot(df_ywa_single_long, aes(x = PA, y = Pop, fill = GenCat)) +
  geom_bar(stat = "identity", position = position_dodge(reverse = TRUE), width = 0.7) +
  scale_fill_manual(
    values = c("Young Adults (25‚Äì34)" = "#ffffb3", "Working Adults (35‚Äì54)" = "#bebada"),
    breaks = c("Working Adults (35‚Äì54)", "Young Adults (25‚Äì34)")  # control legend order
  ) +
  labs(
    title = "Top 15 Planning Areas by Working Adults (35‚Äì54)",
    subtitle = "Bars arranged in ascending order; Working Adults appear above Young Adults",
    x = NULL, y = "Population", fill = NULL
  ) +
  scale_y_continuous(labels = scales::comma) +
  coord_flip() +
  theme_minimal(base_size = 11)

```

```{r}
# Required packages
pacman::p_load(ggplot2, dplyr, stringr, ggthemes, patchwork)

# Compute Median and IQR per Region
df_age_stats <- df %>%
  filter(!is.na(Region)) %>%
  group_by(Region, Age) %>%
  summarise(Pop = sum(Pop), .groups = "drop") %>%
  group_by(Region) %>%
  mutate(cum_pop = cumsum(Pop),
         total_pop = sum(Pop),
         cum_prop = cum_pop / total_pop) %>%
  summarise(
    Median = Age[which.min(abs(cum_prop - 0.5))],
    Q1 = Age[which.min(abs(cum_prop - 0.25))],
    Q3 = Age[which.min(abs(cum_prop - 0.75))],
    .groups = "drop"
  )

# Plot: Median Age and IQR per Region
ggplot(df_age_stats, aes(x = reorder(Region, Median), y = Median)) +
  geom_point(size = 3, color = "#3366CC") +
  geom_errorbar(aes(ymin = Q1, ymax = Q3), width = 0.2, color = "#3366CC", linewidth = 0.8) +
  coord_flip() +
  labs(
    title = "Median Age with Interquartile Range by Region",
    subtitle = "Singapore Resident Population (2024)",
    x = NULL,
    y = "Age"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 10)
  )

```

```{r}
# Load required libraries
pacman::p_load(dplyr, ggplot2, patchwork, stringr, ggrepel)

# Define generation bands
generation_bands <- tibble(
  Gen = c("Alpha & Gen Z", "Young Adults", "Working Adults",
          "Silver Gen", "Merdeka Gen", "Pioneer Gen"),
  Start = c(0, 24, 34, 54, 64, 74),
  End   = c(24, 34, 54, 64, 74, 105),
  Fill  = c("#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462")
)

# Expand dataset
df_expanded <- df %>%
  filter(!is.na(Region)) %>%
  select(Region, Age, Pop) %>%
  slice(rep(1:n(), Pop %/% 10))  # Downsampling for performance

# Compute quartiles per region
stats_labels <- df_expanded %>%
  group_by(Region) %>%
  summarise(
    Q1 = quantile(Age, 0.25),
    Median = median(Age),
    Q3 = quantile(Age, 0.75),
    .groups = "drop"
  ) %>%
  pivot_longer(cols = c(Q1, Median, Q3), names_to = "Type", values_to = "Value") %>%
  mutate(Label = paste0(Type, ": ", round(Value)))

# Plot
ggplot() +
  # Generation bands background
  lapply(1:nrow(generation_bands), function(i) {
    annotate("rect",
             xmin = -Inf, xmax = Inf,
             ymin = generation_bands$Start[i], ymax = generation_bands$End[i],
             fill = generation_bands$Fill[i], alpha = 0.4)
  }) +
  # Boxplot
  geom_boxplot(data = df_expanded, aes(x = Region, y = Age),
               fill = "grey70", color = "black", width = 0.6, outlier.alpha = 0.5) +
  # Quartile annotations with repel
  geom_text_repel(
    data = stats_labels,
    aes(x = Region, y = Value, label = Label),
    size = 2.8,
    color = "#7b7272",
    direction = "y",
    nudge_x = 0.5,
    segment.color = "black"
  ) +
  coord_flip() +
  labs(
    title = "Age Distribution Across Regions",
    subtitle = "Boxplot annotated with regional Q1, Median, and Q3 values",
    x = NULL, y = "Age"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    panel.grid.major.y = element_blank()
  )

```

### üîç **3.6 Which subzones are the most densely populated?**

**Goal**: Identify where population pressure may be most intense.

**Method**: Bar chart or (if spatial data available) choropleth map of total population.

```{r}

df_subzone_pop <- df %>%
  group_by(SZ) %>%
  summarise(Pop = sum(Pop)) %>%
  arrange(desc(Pop)) %>%
  slice_head(n = 20)

ggplot(df_subzone_pop, aes(x = reorder(SZ, Pop), y = Pop)) +
  geom_col(fill = "darkblue") +
  coord_flip() +
  labs(title = "Top 20 Most Populated Subzones", x = "Subzone", y = "Population") +
  theme_minimal()

```

```{r}

# Load spatial packages
pacman::p_load(sf, ggplot2, tidyverse, viridis)

# Read the planning area shapefile (GeoPackage or GeoJSON recommended)
planning_areas <- st_read("Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml")  # or .shp/.geojson

# Prepare population data: total by PA
pa_pop <- df %>%
  group_by(PA) %>%
  summarise(Pop = sum(Pop))

# Ensure both PA names match exactly (some cleaning may be needed)
# Join spatial and population data
map_data <- planning_areas %>%
  left_join(pa_pop, by = c("Name" = "PA"))  # Adjust column name if different

# Plot
ggplot(map_data) +
  geom_sf(aes(fill = Pop), color = "white") +
  scale_fill_viridis_c(option = "plasma", trans = "log") +
  labs(title = "Population Distribution by Planning Area, Singapore",
       fill = "Population") +
  theme_minimal()

```

```{r}

unique(planning_areas$Name)


```

```{r}

# Load required packages
pacman::p_load(sf, dplyr, ggplot2, viridis, stringr)

# Step 1: Read the KML file
planning_areas <- st_read("Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml")

# Step 2: Assign names to each geometry
pa_names <- c(
  "ANG MO KIO", "BEDOK", "CENTRAL WATER CATCHMENT", "CHANGI", "BISHAN", "BOON LAY",
  "MARINA SOUTH", "MARINE PARADE", "BUKIT BATOK", "BUKIT MERAH", "BUKIT PANJANG",
  "BUKIT TIMAH", "CHANGI BAY", "CHOA CHU KANG", "CLEMENTI", "DOWNTOWN CORE", "GEYLANG",
  "TENGAH", "HOUGANG", "JURONG EAST", "JURONG WEST", "KALLANG", "LIM CHU KANG", "MANDAI",
  "MARINA EAST", "MUSEUM", "NEWTON", "NORTH-EASTERN ISLANDS", "NOVENA", "ORCHARD",
  "OUTRAM", "PASIR RIS", "PAYA LEBAR", "PIONEER", "PUNGGOL", "QUEENSTOWN",
  "RIVER VALLEY", "ROCHOR", "SELETAR", "SEMBAWANG", "SENGKANG", "SERANGOON",
  "SIMPANG", "SINGAPORE RIVER", "SOUTHERN ISLANDS", "STRAITS VIEW", "SUNGEI KADUT",
  "TAMPINES", "TANGLIN", "TOA PAYOH", "TUAS", "WESTERN ISLANDS",
  "WESTERN WATER CATCHMENT", "WOODLANDS", "YISHUN"
)
planning_areas$PA <- pa_names

# Step 3: Prepare population data
pa_pop <- df %>%
  mutate(PA = str_to_upper(str_trim(PA))) %>%
  group_by(PA) %>%
  summarise(Pop = sum(Pop), .groups = "drop")

# Step 4: Join population to spatial data
map_data <- planning_areas %>%
  left_join(pa_pop, by = "PA")

# Step 5: Plot with linear color scale (light = low pop, dark = high)
ggplot(map_data) +
  geom_sf(aes(fill = Pop), color = "white", size = 0.3) +
  scale_fill_viridis_c(option = "plasma", direction = -1, na.value = "grey90") +
  labs(
    title = "Population Distribution by Planning Area, Singapore (2024)",
    fill = "Population"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    legend.position = "right"
  )


```

```{r}
# Load packages
pacman::p_load(sf, dplyr, ggplot2, viridis, stringr)

# Step 1: Read the KML file
planning_areas <- st_read("Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml")

# Step 2: Add manually mapped names to the geometries
pa_names <- c(
  "ANG MO KIO", "BEDOK", "CENTRAL WATER CATCHMENT", "CHANGI", "BISHAN", "BOON LAY",
  "MARINA SOUTH", "MARINE PARADE", "BUKIT BATOK", "BUKIT MERAH", "BUKIT PANJANG",
  "BUKIT TIMAH", "CHANGI BAY", "CHOA CHU KANG", "CLEMENTI", "DOWNTOWN CORE", "GEYLANG",
  "TENGAH", "HOUGANG", "JURONG EAST", "JURONG WEST", "KALLANG", "LIM CHU KANG", "MANDAI",
  "MARINA EAST", "MUSEUM", "NEWTON", "NORTH-EASTERN ISLANDS", "NOVENA", "ORCHARD",
  "OUTRAM", "PASIR RIS", "PAYA LEBAR", "PIONEER", "PUNGGOL", "QUEENSTOWN",
  "RIVER VALLEY", "ROCHOR", "SELETAR", "SEMBAWANG", "SENGKANG", "SERANGOON",
  "SIMPANG", "SINGAPORE RIVER", "SOUTHERN ISLANDS", "STRAITS VIEW", "SUNGEI KADUT",
  "TAMPINES", "TANGLIN", "TOA PAYOH", "TUAS", "WESTERN ISLANDS",
  "WESTERN WATER CATCHMENT", "WOODLANDS", "YISHUN"
)

# Assign the names (assumes order matches exactly with features)
planning_areas$PA <- pa_names

# Step 3: Summarise population by PA
pa_pop <- df %>%
  mutate(PA = str_to_upper(str_trim(PA))) %>%
  group_by(PA) %>%
  summarise(Pop = sum(Pop), .groups = "drop")

# Step 4: Join population to spatial geometries
map_data <- planning_areas %>%
  left_join(pa_pop, by = "PA")

# Step 5: Plot
ggplot(map_data) +
  geom_sf(aes(fill = Pop), color = "white", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", trans = "log", na.value = "grey90") +
  labs(
    title = "Population Distribution by Planning Area, Singapore",
    fill = "Population (log scale)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    legend.position = "right"
  )

```
