---
title: "Take-Home Exercise 1 (Part 2)"
author: "Liu Chih Yuan & David Chiam"
date: "April 29, 2025"
date-modified: "10 May 2025"
format: html
code-fold: true
code-tools: true

execute: 
  eval: true        # run code 
  echo: true         # show code 
  message: false
  warning: false     #warning msg wont come out
  freeze: true      #speed up rendering time
editor: visual
---

::: callout-note
This Netlify page was originally designed and produced by [LIU CHIH-YUAN](https://cabbage-wonderland.netlify.app/takehome_ex/takehome_ex01/takehome_ex01) for his Take-Home Assignment 1.

I will be providing a critic on three good design principles and three areas for further improvement on his work. I will also preare the makeover version of the data visualisation.
:::

# Exploratory Analysis of Age and Gender Distribution Across Singapore Planning Areas (2024)

## 1. Overview

The 2024 dataset from Singapore' Department of Statistics provides resident population data by planning area, subzone, age, and sex.

### 1.1 Objective

To perform structured exploratory data analysis to uncover insights on demographic distribution across regions.

## 2. Getting Started

### 2.1 Load Packages

```{r}
pacman::p_load(tidyverse, ggrepel, ggthemes, patchwork, ggridges, scales)
```

The R packages used in this EDA are as follows:

1.  `tidyverse` core R package for data science (contains essential packages such as ggplot2)
2.  `ggrepel` for ggplot2 to repel overlapping text labels
3.  `ggthemes` extra ggplot themes
4.  `patchwork` combine ggplot
5.  `ggridges` for ridgeline plots
6.  `scales` customer number formatting

### 2.2 Import Data

```{r}
df <- read.csv("Dataset/respopagesex2024.csv")
```

```{r}
common_theme <- theme_minimal(base_size = 16) +
  theme(
    axis.text = element_text(size = 18),
    axis.title = element_text(size = 20),
    plot.title = element_text(size = 18, face = "bold"),
    legend.text = element_text(size = 17),
    legend.title = element_text(size = 16)
  )
```

#### 2.2.1 Check Missing Values

```{r}
glimpse(df)
colSums(is.na(df))
```

### 2.3 Data Processing

#### 2.3.1 Checking Column Types

```{r}
str(df)
```

We see column `Age` is "chr" (character) instead of numeric, let's check why by finding the unique value of column `Age`

```{r}
sort(unique(df$Age))
```

Here most likely it's the `90_and_over` causing it to be a `str` not `int`

#### 2.3.2 Creating a Numeric Age Column

```{r}
df <- df %>%
  mutate(
    AgeNum = suppressWarnings(
      ifelse(Age == "90_and_Over", 90, as.numeric(Age))
    )
  )
```

Since we observed people over 90 years old are categorized `90_and_above` instead of actual numbers, for the ease of plotting we hereby create a new column `AgeNum`

#### 2.3.3 Creating Age Grouping

```{r}
df <- df %>%
  mutate(
    AgeGroup = case_when(
      AgeNum <= 12 ~ "Child",
      AgeNum <= 24 ~ "Youth",
      AgeNum <= 64 ~ "Adult",
      TRUE ~ "Senior"
    )
  )
```

We create a new column `AgeGroup` for future EDA purposes

```{r}
str(df)
```

## 3. Exploratory Data Analysis

### EDA 1: Population by Age / Age Group

```{r fig.height=8, fig.width=10}
p1 <- ggplot(df, aes(x = AgeNum, y = Pop)) +
  stat_summary(fun = sum, geom = "bar", fill = "steelblue") +
  labs(title = "Total Population by Age", x = "Age", y = "Population") +
  scale_y_continuous(labels = label_comma()) +
  common_theme

p2 <- df %>%
  group_by(AgeGroup) %>%
  summarise(Pop = sum(Pop)) %>%
  ggplot(aes(x = AgeGroup, y = Pop, fill = AgeGroup)) +
  geom_bar(stat = "identity") +
  labs(title = "Population by Age Group", y = "Population") +
  scale_y_continuous(labels = label_comma()) +
  common_theme

(p1 / p2) + plot_layout(heights = c(1.2, 1))
```

**Insights:**

1.  Most residents fall between **ages 25 to 54**
2.  **Youth population is shrinking**, suggesting long-term labor sustainability issues
3.  **Senior population (65+) rising**, indicating growing need for eldercare and aging population

------------------------------------------------------------------------

::: callout-note
## *Comments by David Chiam* on EDA 1: Population by Age / Age Group

![](/Images/thumbs-up.png){width="32"}[<strong> 3 Good Design Principles</strong>]{style="font-size:22px; color:#0077CC;"}

1.  **Good Data-Appropriate Chart Type (Total Population by Age & Population by Age Group)**

    -   A Bar Chart was used to show the visualization of the population count for each discrete age. This is apprpriate for numerical variable like age or age bands. Readers can easily assess relative sizes, which support the effective visual comparison (i.e. comparing which age has a higher count).

    -   The second plot on "Population by Age Group" has banded the ages into 4 Age Groups, namely: *Adult*, *Child*, *Senior* and *Youth*. This helps to condense the chart into age categories for quick selection if one intends to zoom in to a particularly age group for analysis.

    -   [**Assessment**]{.underline}: I would give this a rather high score on the clarity scale.

2.  **Clear Labelling and Minimal Chart Junk**

    -   The Axis Labels were simple and understanbleable. For both plots, the Y-axis population intervals with the use of horizontal grid lines allow for clear relative reference and comparisons. Furthermore the grid line are in lighter tone of grey which does not distract the viewer.

    -   With no excessive gridlines, background noise, or distracting embellishments, Chih Yuan was able to apply the principle of minimizing “non-data ink” to maintain visual clarity.

    -   [**Assessment**]{.underline}: I would give this a good score on the clarity scale.

3.  **Functional Simplicity**

    -   The plot avoids excessive color schemes, 3D effects, or elaborate design, ensuring that the focus remains solely on the dataset itself. The use of colours also made the visual easier to identify age groupings which confusion, especially avoiding "colour blind" schemes.

    -   It can be observed that Chih Yuan has likely prioritized clarity over unnecessary decoration is a strong point.

![](/Images/negative-comment.png){width="32"}[<strong> 3 Areas for Improvement </strong>]{style="font-size:22px; color:#0077CC;"}
:::

```{r}

# 1. Population by Age
df_age <- df %>%
  filter(!is.na(Age)) %>%
  group_by(Age) %>%
  summarise(Pop = sum(Pop), .groups = "drop")

# 2. Define age groups
df_age_group <- df %>%
  mutate(
    AgeGroup = case_when(
      Age <= 14 ~ "Child (0–14)",
      Age >= 15 & Age <= 24 ~ "Youth (15–24)",
      Age >= 25 & Age <= 64 ~ "Adult (25–64)",
      Age >= 65 ~ "Senior (65+)"
    )
  ) %>%
  group_by(AgeGroup) %>%
  summarise(Pop = sum(Pop), .groups = "drop")

# For percentage plot
df_age_group <- df_age_group %>%
  mutate(Perc = Pop / sum(Pop) * 100)


# --- Plotting ---

# Add AgeGroup into df_age (merge logic)
df_age <- df_age %>%
  mutate(
    AgeGroup = case_when(
      Age <= 14 ~ "Child (0–14)",
      Age >= 15 & Age <= 24 ~ "Youth (15–24)",
      Age >= 25 & Age <= 64 ~ "Adult (25–64)",
      Age >= 65 ~ "Senior (65+)"
    )
  )

# Define color palette
agegroup_colors <- c(
  "Child (0–14)" = "#8dd3c7",
  "Youth (15–24)" = "#ffffb3",
  "Adult (25–64)" = "#bebada",
  "Senior (65+)" = "#fb8072"
)

# --- Plot A: Total Population by Age (now colored by AgeGroup)
plot_age <- ggplot(df_age, aes(x = Age, y = Pop, fill = AgeGroup)) +
  geom_col(color = "grey30", width = 0.9) +
  scale_fill_manual(values = agegroup_colors) +
  scale_y_continuous(labels = comma) +
  labs(
    title = "Singapore Resident Population by Age",
    x = "Age", y = "Population",
    fill = "Age Group"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 10),
    panel.grid.minor = element_blank(),
    legend.position = "none"  # Hide legend because Plot B will show it
  )

# --- Plot B: Population Composition by Age Group (same as before)
plot_agegroup <- ggplot(df_age_group, aes(x = "", y = Perc, fill = AgeGroup)) +
  geom_col(width = 0.5, color = "grey20") +
  coord_flip() +
  scale_fill_manual(values = agegroup_colors) +
  labs(
    title = "Population Composition by Age Group",
    x = NULL, y = "Percentage of Total Population",
    fill = "Age Group"
  ) +
  scale_y_continuous(labels = function(x) paste0(x, "%")) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    legend.position = "top",
    legend.title = element_text(size = 10),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

# --- Final Combined Plot
(plot_age) / (plot_agegroup) +
  plot_layout(heights = c(2.0, 0.5))

```

```{}
```

```{r fig.height=8, fig.width=10}

# --- Data Preparation ---
df_age <- df_age %>%
  mutate(
    Age = as.numeric(Age),  # <-- Ensure Age is numeric
    AgeGroup = case_when(
      Age <= 14 ~ "Child (0–14)",
      Age >= 15 & Age <= 24 ~ "Youth (15–24)",
      Age >= 25 & Age <= 64 ~ "Adult (25–64)",
      Age >= 65 ~ "Senior (65+)"
    ),
    AgeGroup = factor(AgeGroup, levels = c(
      "Child (0–14)", "Youth (15–24)", "Adult (25–64)", "Senior (65+)"
    ))
  )

# df_age_group AgeGroup ordering (optional if you haven't already)
df_age_group <- df_age_group %>%
  mutate(AgeGroup = factor(AgeGroup, levels = c(
    "Child (0–14)", "Youth (15–24)", "Adult (25–64)", "Senior (65+)"
  )))



# --- Plotting ---

# Add AgeGroup into df_age (merge logic)
df_age <- df_age %>%
  mutate(
    AgeGroup = case_when(
      Age <= 14 ~ "Child (0–14)",
      Age >= 15 & Age <= 24 ~ "Youth (15–24)",
      Age >= 25 & Age <= 64 ~ "Adult (25–64)",
      Age >= 65 ~ "Senior (65+)"
    ),
    AgeGroup = factor(AgeGroup, levels = c("Child (0–14)", "Youth (15–24)", "Adult (25–64)", "Senior (65+)"))
  )

# Define color palette
agegroup_colors <- c(
  "Child (0–14)" = "#8dd3c7",
  "Youth (15–24)" = "#ffffb3",
  "Adult (25–64)" = "#bebada",
  "Senior (65+)" = "#fb8072"
)

# --- Plot A: Total Population by Age
plot_age <- ggplot(df_age, aes(x = Age, y = Pop, fill = AgeGroup)) +
  geom_col(color = "grey30", width = 0.9) +
  scale_fill_manual(values = agegroup_colors) +
  scale_x_continuous(breaks = seq(0, 110, by = 5)) +  # X-axis labels every 5 years
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Singapore Resident Population by Age",
    x = "Age", y = "Population Count",
    fill = "Age Group"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 8),
    panel.grid.minor = element_blank(),
    legend.position = "none"
  )

# --- Plot B: Population Composition by Age Group (safe way)

# Fix: Filter to only valid 4 Age Groups
df_age_group <- df_age_group %>%
  filter(AgeGroup %in% c("Child (0–14)", "Youth (15–24)", "Adult (25–64)", "Senior (65+)")) %>%
  mutate(AgeGroup = factor(AgeGroup, levels = c("Child (0–14)", "Youth (15–24)", "Adult (25–64)", "Senior (65+)")))

plot_agegroup <- ggplot(df_age_group, aes(x = AgeGroup, y = Perc, fill = AgeGroup)) +
  geom_col(width = 0.5, color = "grey20") +
  scale_fill_manual(values = agegroup_colors) +
  scale_y_continuous(labels = function(x) paste0(x, "%")) +
  coord_flip() +
  labs(
    title = "Population Composition by Age Group",
    x = NULL, y = "Percentage of Total Population",
    fill = "Age Group"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(size = rel(0.7)),  # 30% smaller
    axis.text = element_text(size = 8)
  )


# --- Final Combined Plot
(plot_age) / (plot_agegroup) +
  plot_layout(heights = c(2.0, 1.5)) 
```

```{r fig.height=8, fig.width=10}
# --- Plotting ---

# Add AgeGroup into df_age (merge logic)
df_age <- df_age %>%
  mutate(
    AgeGroup = case_when(
      Age <= 14 ~ "Child (0–14)",
      Age >= 15 & Age <= 24 ~ "Youth (15–24)",
      Age >= 25 & Age <= 64 ~ "Adult (25–64)",
      Age >= 65 ~ "Senior (65+)"
    ),
    AgeGroup = factor(AgeGroup, levels = c("Child (0–14)", "Youth (15–24)", "Adult (25–64)", "Senior (65+)"))
  )

# Define color palette
agegroup_colors <- c(
  "Child (0–14)" = "#8dd3c7",
  "Youth (15–24)" = "#ffffb3",
  "Adult (25–64)" = "#bebada",
  "Senior (65+)" = "#fb8072"
)

# --- Plot A: Total Population by Age
plot_age <- ggplot(df_age, aes(x = Age, y = Pop, fill = AgeGroup)) +
  geom_col(color = "grey30", width = 0.9) +
  scale_fill_manual(values = agegroup_colors) +
  scale_x_continuous(breaks = seq(0, 110, by = 5)) +  # X-axis labels every 5 years
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Singapore Resident Population by Age",
    x = "Age", y = "Population Count",
    fill = "Age Group"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 8),
    panel.grid.minor = element_blank(),
    legend.position = "none"
  )

# --- Plot B: Updated Population Composition by Age Group ---

# Make sure df_age_group has both Pop and Perc (you may need to adjust depending on upstream prep)
# Assume df_age_group has columns: AgeGroup, Pop, Perc

plot_agegroup <- ggplot(df_age_group, aes(x = AgeGroup, y = Perc, fill = AgeGroup)) +
  geom_col(width = 0.5, color = "grey20") +
  scale_fill_manual(values = agegroup_colors) +
  scale_y_continuous(labels = function(x) paste0(x, "%")) +
  coord_flip() +
  # Labels inside the bar for Pop (Population Count)
  geom_text(aes(label = scales::comma(Pop)), 
            position = position_stack(vjust = 0.5), 
            color = "black", size = 3) +
  # Labels at the end for Percentage
  geom_text(aes(label = paste0(round(Perc, 1), "%"), y = Perc + 2), 
            hjust = 0, size = 3, color = "grey30") +
  labs(
    title = "Population Composition by Age Group",
    x = "Age Category", y = NULL,
    fill = "Age Group"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(size = rel(0.7)),  # 30% smaller
    axis.text.y = element_blank(),  # Remove category labels
    axis.ticks.y = element_blank()
  )



# --- Final Combined Plot
(plot_age) / (plot_agegroup) +
  plot_layout(heights = c(2.0, 1.5)) 

```

```{r}
```

------------------------------------------------------------------------
