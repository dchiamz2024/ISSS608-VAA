[
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home Assignment 2",
    "section": "",
    "text": "For the purpose of this assignment, five R packages will be used. They are tidyverse, jsonlite, tidygraph, ggraph and SmartEDA.\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\npacman::p_load(tidyverse, jsonlite, \n               tidygraph, ggraph,\n               SmartEDA)\n\n\n\n\nWe will be loading the MC1_graph.json file given for Vast Challange 2025’s Mini-Challenge 1. The code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\nkg &lt;- fromJSON(\"Data/mc1_graph.json\")\n\n\n\n\nBefore preparing the data, it is always a good practice to examine the structure of kg object. In the code chunk below str() is used to reveal the structure of kg object.\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\nNext, we will use the as_tibble() of tibble package package to extract the nodes and links tibble data frames from kg object into two separate tibble data frames called nodes_tbl and edges_tbl respectively.\n\nnodes_tb1 &lt;- as_tibble(kg$nodes)\nedges_tb1 &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#getting-started",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#getting-started",
    "title": "Take-Home Assignment 2",
    "section": "",
    "text": "For the purpose of this assignment, five R packages will be used. They are tidyverse, jsonlite, tidygraph, ggraph and SmartEDA.\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environment.\n\npacman::p_load(tidyverse, jsonlite, \n               tidygraph, ggraph,\n               SmartEDA)\n\n\n\n\nWe will be loading the MC1_graph.json file given for Vast Challange 2025’s Mini-Challenge 1. The code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\nkg &lt;- fromJSON(\"Data/mc1_graph.json\")\n\n\n\n\nBefore preparing the data, it is always a good practice to examine the structure of kg object. In the code chunk below str() is used to reveal the structure of kg object.\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\nNext, we will use the as_tibble() of tibble package package to extract the nodes and links tibble data frames from kg object into two separate tibble data frames called nodes_tbl and edges_tbl respectively.\n\nnodes_tb1 &lt;- as_tibble(kg$nodes)\nedges_tb1 &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#initial-eda",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#initial-eda",
    "title": "Take-Home Assignment 2",
    "section": "Initial EDA",
    "text": "Initial EDA\nWe then apply EDA methodology to examine data. The code chunk below uses theggplot2 functions to reveal the frequency distribution of Edge Type field of edges_tbl.\n\nggplot(data = edges_tb1,\n       aes(y = `Edge Type`)) + \n  geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tb1,\n       aes(y = `Node Type`)) + \n  geom_bar()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#creating-knowledge-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#creating-knowledge-graph",
    "title": "Take-Home Assignment 2",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nThis is\n\nStep 1: Mapping from node id to row index\n\nid_map &lt;- tibble(id = nodes_tb1$id,\n                 index = seq_len(nrow(nodes_tb1)))\n\nThis ensures each id from your node list is mapped to the correct row number.\n\n\nStep 2: Map source and target IDs to row indices\n\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\n\nedges_tb1 &lt;- edges_tb1 %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\nStep 4: Creating the graph\nLastly, tbl_grpah() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tb1,\n                   edges = edges_tb1,\n                   directed = kg$directed)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualising-the-knowledge-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualising-the-knowledge-graph",
    "title": "Take-Home Assignment 2",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\nset.seed(1234)\n\n\nVisualising the whole Graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 4)+\n  geom_node_text(aes(label = name),\n                repel = TRUE,\n                size = 2.5) +\n  theme_void()\n\n\n\nVisualising the sub-graph\nIn this section, we are interested to create a sub-graph based on *Memberof* value in Edge Type column of the edges data frame.\n\nStep 1: Filter edges to only “Memberof”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\nStep 2: Extract only connected nodes (i.e., used in these edges)\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\nStep 3: Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)    # optional cleanup\n\n\n\nPlot the sub-graph\n\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1)+\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()"
  }
]