[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04b.html",
    "title": "Hands-on Exercise 4b",
    "section": "",
    "text": "This page will be filled soon, come check it out in time to come."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, the task was to prepare at most three data visualisation for the exercise.\nHence in this exercise, I curated three key visualisations as part of dats exploration:\n\nGenerational Distribution by Region: A paired bar chart highlights both absolute and relative generational makeup across Singapore’s five planning regions, revealing the Central and East as home to proportionally older populations.\nAge Demographics by Planning Area: A boxplot with overlaid generation bands showcases median age and interquartile ranges, emphasising regions with mature population profiles like Central and West Singapore.\nTop Planning Areas by Age Band: A set of ranked bar charts and accompanying pie charts depict the top 15 planning areas by population size in three age segments—youth (0–24), adults (25–54), and seniors (55+). These are complemented with gender breakdowns to visualise demographic imbalances."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#setting-the-scene",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#setting-the-scene",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-task",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-task",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, the task was to prepare at most three data visualisation for the exercise.\nHence in this exercise, I curated three key visualisations as part of dats exploration:\n\nGenerational Distribution by Region: A paired bar chart highlights both absolute and relative generational makeup across Singapore’s five planning regions, revealing the Central and East as home to proportionally older populations.\nAge Demographics by Planning Area: A boxplot with overlaid generation bands showcases median age and interquartile ranges, emphasising regions with mature population profiles like Central and West Singapore.\nTop Planning Areas by Age Band: A set of ranked bar charts and accompanying pie charts depict the top 15 planning areas by population size in three age segments—youth (0–24), adults (25–54), and seniors (55+). These are complemented with gender breakdowns to visualise demographic imbalances."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-On_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-On_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "This page will be filled soon, come check it out in time to come."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-On_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-On_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "This page will be filled soon, come check it out in time to come."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home Assignment 2",
    "section": "",
    "text": "This page will be filled soon, come check it out in time to come."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-On_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-On_Ex07.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "This page will be filled soon, come check it out in time to come."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-David’s Visual Analytics Portfolio",
    "section": "",
    "text": "Welcome to ISSS609 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course.\nI hope that over the journey of this course, I will turn from this:\n\n\n\n\n\nTo enjoying what I have learn from this course and applying it to my future work."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"DataEx04/Exam_data.csv\")\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\nFigure 1: Ridgeline Plot of English scores by Class\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#learning-outcome",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#getting-started",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"DataEx04/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\nFigure 1: Ridgeline Plot of English scores by Class\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\nNote: Pacman is like a package manager, Tidyverse are packages for data science eg. plotting, wrangling, cleaning, visualization etc\n\npacman::p_load(tidyverse) \n\n\n\n\nNote: if you did not run the first code chunk tidyverse, this will indicate not found. read_csv is a code from tidyverse\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\nNote: Pacman is like a package manager, Tidyverse are packages for data science eg. plotting, wrangling, cleaning, visualization etc\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Note: if you did not run the first code chunk tidyverse, this will indicate not found. read_csv is a code from tidyverse\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse,\n               ggplot2) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"DataEx03/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n How does it work?\nIt extends ggplot2 with:\n\ninteractive geom functions: geom_point_interactive(), geom_col_interactive(), etc.\ninteractive scale functions: scale_color_continuous_interactive(), scale_fill_manual_interactive(), etc.\ninteractive facet functions: facet_wrap_interactive(), facet_grid_interactive() with labeller_interactive().\ninteractive guide functions: guide_colorbar_interactive(), guide_legend_interactive().\ninteractive theme elements: element_line_interactive(), element_rect_interactive(), label_interactive().\n\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:#27dfff; #&lt;&lt;here\n                font-style:bold; \n                color:black;\" #&lt;&lt;here\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;here\n    opts_tooltip(    #&lt;&lt;here\n      css = tooltip_css)) #&lt;&lt;here\n)                                        \n\nNotice that the inital plot had a background colour of the tooltip as black and the font colour as white and bold.\nNow with the adjusted code chunk, the background colour of the tooltip is blue and the font colour as black and bold.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\n\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning ⚠️\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe patchwork package was used to stack multiple ggplot objects vertically using the / operator. This layout was wrapped within the girafe() function to render a single interactive widget.\nCustom styling was applied using opts_hover() and opts_hover_inv() inside girafe() to enhance interactivity. When a student is selected, their dot turns dark, while other points fade slightly in the background. Additionally, the colour of the tooltip background was customised to blue and the font colour as black and bold.\nThe final result is an integrated view where interactivity in one plot automatically updates the display across all other plots, allowing for rich comparative analysis across subjects.\n\ntooltip_css &lt;- \"background-color:#27dfff; \n                font-style:bold; \n                color:black;\" \n\n# Create tooltip text combining ID and CLASS\nexam_data$tooltip &lt;- paste0(\n  \"ID: \", exam_data$ID, \"\\nClass: \", exam_data$CLASS\n)\n\n# Create 3 interactive ggplots with the same structure\np1 &lt;- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Maths\")\n\np2 &lt;- ggplot(exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"English\")\n\np3 &lt;- ggplot(exam_data, aes(x = SCIENCE)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Science\")\n\n\n# Use patchwork's vertical stacking with /\ncombined_plot &lt;- p1 / p2 / p3\n\n# Render interactive stacked plots\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 6,\n  height_svg = 8,  # Increase height for stacked layout\n  options = list(\n    opts_hover(css = \"fill: #ff9305; stroke: black; \"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip(css = tooltip_css) \n  )\n)\n\n\n\n\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English vs. Maths\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))  # bold & centered title\n  \nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nlibrary(crosstalk)\n\n# Use crosstalk to enable linking\nd &lt;- highlight_key(exam_data)\n\n# Plot 1: English vs. Maths\np1 &lt;- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"English\")\n\n# Plot 2: Science vs. Maths\np2 &lt;- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"Science\")\n\n# Combine into interactive subplot\nsubplot(\n  ggplotly(p1), \n  ggplotly(p2), \n  nrows = 1,         # Side-by-side layout\n  margin = 0.06, \n  shareX = FALSE, \n  shareY = FALSE,\n  titleX = TRUE, \n  titleY = TRUE\n) %&gt;%\n  layout(\n    font = list(size = 10),  # Axis font size\n    margin = list(t = 80),   # Add top margin (in pixels) to prevent title cutoff\n    annotations = list(\n      list(  # Title for left plot\n        text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n        x = 0.1, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      ),\n      list(  # Title for right plot\n        text = \"&lt;b&gt;Science vs. Maths&lt;/b&gt;\",\n        x = 0.9, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      )\n    )\n  )\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)      \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\n\n\n\n\n\n\n\nDownloaded the Consumer Price Index (CPI), 2024 As Base Year Dataset from SingStat.\nlink: https://tablebuilder.singstat.gov.sg/table/TS/M213801\nStep 1: Data Import and Cleaning\n\n# Load CPI data\ncpi_raw &lt;- read_csv(\"DataEx03/CPI_editedRaw.csv\", show_col_types = FALSE)\n\n# Filter for required categories\ncpi_filtered &lt;- cpi_raw %&gt;%\n  filter(`Data Series` %in% c(\"Food\", \"Health\", \"Transport\", \"Education\"))\n\n# Pivot longer from wide to long format\ncpi_long &lt;- cpi_filtered %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"CPI\") %&gt;%\n  mutate(\n    Year = as.integer(Year),\n    CPI = as.numeric(CPI),\n    Item = `Data Series`\n  ) %&gt;%\n  select(Item, Year, CPI)\n\nStep 2: Plot Visuals all into single graph (Static)\n\n# Define color scheme\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",\n  \"Health\" = \"#377EB8\",\n  \"Transport\" = \"#4DAF4A\",\n  \"Education\" = \"#984EA3\"\n)\n\n# Build static plot\nmake_static_plot &lt;- function(category_name) {\n  ggplot(cpi_long %&gt;% filter(Item == category_name),\n         aes(x = Year, y = CPI)) +\n    geom_line(color = item_colors[category_name], size = 1.2) +\n    geom_point(color = item_colors[category_name], size = 2) +\n    labs(title = paste(\"CPI Trend:\", category_name), x = \"Year\", y = \"CPI Index\") +\n    theme_minimal() +\n    theme(plot.title = element_text(face = \"bold\", size = rel(3.5)))\n}\n\n# Combine static plots using patchwork\np10 &lt;- make_static_plot(\"Food\")\np20 &lt;- make_static_plot(\"Health\")\np30 &lt;- make_static_plot(\"Transport\")\np40 &lt;- make_static_plot(\"Education\")\n\np10 / p20 / p30 / p40 + plot_layout(heights = c(15, 15, 15, 15))\n\n\n\n\n\n\n\n\nStep 3: Plot Visuals all into combined graph (Interactive)\n\n# Define consistent colors for each category\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",       # red\n  \"Health\" = \"#377EB8\",     # blue\n  \"Transport\" = \"#4DAF4A\",  # green\n  \"Education\" = \"#984EA3\"   # purple\n)\n\n# Build interactive line chart with manual color scale\np9 &lt;- ggplot(cpi_long, aes(x = Year, y = CPI, color = Item,\n                           group = Item,\n                           tooltip = paste0(Item, \"&lt;br&gt;Year: \", Year, \"&lt;br&gt;CPI: \", round(CPI, 1)),\n                           data_id = paste(Item, Year))) +\n  geom_line_interactive(size = 1.2) +\n  geom_point_interactive(size = 2) +\n  scale_color_manual(values = item_colors) +  # &lt;- apply custom color scheme\n  labs(title = \"CPI Trend (1961–2024): Food, Health, Transport, Education\",\n       x = \"Year\", y = \"CPI Index (Base = 2024 = 100)\") +\n  theme_minimal()\n\ngirafe(ggobj = p9)\n\n\n\n\n\nFrom here, we note that the readability is not as good, hence I would plot them as individual graphs as below with interactive option.\n\n# Define consistent colors for each category\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",       # red\n  \"Health\" = \"#377EB8\",     # blue\n  \"Transport\" = \"#4DAF4A\",  # green\n  \"Education\" = \"#984EA3\"   # purple\n)\n\n# Define shared hover effect\nshared_hover_css &lt;- \"stroke: black; stroke-width: 3px; fill-opacity: 1;\"\n\n# Function to generate each interactive plot\nmake_interactive_plot &lt;- function(category_name) {\n  ggplot(cpi_long %&gt;% filter(Item == category_name),\n         aes(x = Year, y = CPI,\n             tooltip = paste0(\"Year: \", Year, \"&lt;br&gt;CPI: \", round(CPI, 1)),\n             data_id = Year)) +\n    geom_line_interactive(color = item_colors[category_name], size = 1.2) +\n    geom_point_interactive(color = item_colors[category_name], size = 2) +\n    labs(title = paste(\"CPI Trend:\", category_name),\n         x = \"Year\", y = \"CPI Index (Base = 2024 = 100)\") +\n    theme_minimal() +\n    theme(plot.title = element_text(face = \"bold\", size = rel(1.3)))\n}\n\n# Generate and display each plot one by one\ngirafe(ggobj = make_interactive_plot(\"Food\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\ngirafe(ggobj = make_interactive_plot(\"Health\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\ngirafe(ggobj = make_interactive_plot(\"Transport\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\ngirafe(ggobj = make_interactive_plot(\"Education\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\n\nStep 4: Plot Visuals all into combined graph (Interactive)\nThis code builds 4 vertically stacked interactive CPI plots and is able to show tooltips and hover highlights.\n\n# Define category colors\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",\n  \"Health\" = \"#377EB8\",\n  \"Transport\" = \"#4DAF4A\",\n  \"Education\" = \"#984EA3\"\n)\n\n# Custom tooltip style\ntooltip_css &lt;- \"background-color: white; color: black; border: 1px solid black; padding: 5px; font-size: 13px;\"\n\n# Create a reusable function for each static panel with interactivity\nmake_interactive_panel &lt;- function(category_name) {\n  ggplot(cpi_long %&gt;% filter(Item == category_name),\n         aes(x = Year, y = CPI,\n             tooltip = paste0(\"Year: \", Year, \"&lt;br&gt;CPI: \", round(CPI, 1)),\n             data_id = Year)) +\n    geom_line_interactive(color = item_colors[category_name], size = 1.2) +\n    geom_point_interactive(color = item_colors[category_name], size = 2) +\n    labs(title = category_name, x = \"Year\", y = \"CPI Index\") +\n    theme_minimal() +\n    theme(plot.title = element_text(face = \"bold\", size = rel(1.5)))\n}\n\n# Combine all plots into one patchwork layout\ncombined_plot &lt;- (\n  make_interactive_panel(\"Food\") /\n  make_interactive_panel(\"Health\") /\n  make_interactive_panel(\"Transport\") /\n  make_interactive_panel(\"Education\")\n)\n\n# Render the full interactive stacked plot\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 10,\n  height_svg = 14,\n  options = list(\n    opts_hover(css = \"fill: #ff9305; stroke: black;\"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip(css = tooltip_css)\n  )\n)\n\n\n\n\n\nNext, I combine back the graphs into a single plot to have a synchronised hoever behavious where hovering on one category (e.g., Food) displays the corresponding values for all other categories (Transport, Health, Education) at that same Year\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nInteractive:\nHover on the point to get the CPI index of the 4 categories for each year.\n\n\n\n# Define consistent colors\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",\n  \"Health\" = \"#377EB8\",\n  \"Transport\" = \"#4DAF4A\",\n  \"Education\" = \"#984EA3\"\n)\n\n# Custom tooltip CSS\ntooltip_css &lt;- \"background-color: white; color: black; border: 1px solid black; padding: 5px; font-size: 13px;\"\n\n# Step 1: Create a tooltip dataset that includes all values by year\ntooltip_data &lt;- cpi_long %&gt;%\n  filter(Item %in% names(item_colors)) %&gt;%\n  pivot_wider(names_from = Item, values_from = CPI) %&gt;%\n  mutate(tooltip = paste0(\n    \"Year: \", Year, \"&lt;br&gt;\",\n    \"Food: \", round(Food, 1), \"&lt;br&gt;\",\n    \"Health: \", round(Health, 1), \"&lt;br&gt;\",\n    \"Transport: \", round(Transport, 1), \"&lt;br&gt;\",\n    \"Education: \", round(Education, 1)\n  ))\n\n# Step 2: Join the tooltip text back to original long format\ncpi_joined &lt;- cpi_long %&gt;%\n  inner_join(tooltip_data %&gt;% select(Year, tooltip), by = \"Year\") %&gt;%\n  filter(Item %in% names(item_colors))\n\n# Step 3: Create unified ggplot with interactive layers\ncombined_plot &lt;- ggplot(cpi_joined, aes(x = Year, y = CPI, group = Item)) +\n  geom_line_interactive(aes(color = Item, data_id = Year, tooltip = tooltip), size = 1.2) +\n  geom_point_interactive(aes(color = Item, data_id = Year, tooltip = tooltip), size = 2) +\n  scale_color_manual(values = item_colors) +\n  labs(title = \"CPI Trends by Category (1961–2024)\",\n       x = \"Year\", y = \"CPI Index (Base = 2024 = 100)\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = rel(1.8)),\n    legend.title = element_blank()\n  )\n\n# Step 4: Render with synchronized hover + rich tooltip\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 12,\n  height_svg = 7,\n  options = list(\n    opts_hover(css = \"stroke: black; stroke-width: 2px;\"),\n    opts_hover_inv(css = \"opacity: 0.2;\"),\n    opts_tooltip(css = tooltip_css)\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#learning-outcome",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#getting-started",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse,\n               ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"DataEx03/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n How does it work?\nIt extends ggplot2 with:\n\ninteractive geom functions: geom_point_interactive(), geom_col_interactive(), etc.\ninteractive scale functions: scale_color_continuous_interactive(), scale_fill_manual_interactive(), etc.\ninteractive facet functions: facet_wrap_interactive(), facet_grid_interactive() with labeller_interactive().\ninteractive guide functions: guide_colorbar_interactive(), guide_legend_interactive().\ninteractive theme elements: element_line_interactive(), element_rect_interactive(), label_interactive().\n\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity-1",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:#27dfff; #&lt;&lt;here\n                font-style:bold; \n                color:black;\" #&lt;&lt;here\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;here\n    opts_tooltip(    #&lt;&lt;here\n      css = tooltip_css)) #&lt;&lt;here\n)                                        \n\nNotice that the inital plot had a background colour of the tooltip as black and the font colour as white and bold.\nNow with the adjusted code chunk, the background colour of the tooltip is blue and the font colour as black and bold.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\n\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning ⚠️\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe patchwork package was used to stack multiple ggplot objects vertically using the / operator. This layout was wrapped within the girafe() function to render a single interactive widget.\nCustom styling was applied using opts_hover() and opts_hover_inv() inside girafe() to enhance interactivity. When a student is selected, their dot turns dark, while other points fade slightly in the background. Additionally, the colour of the tooltip background was customised to blue and the font colour as black and bold.\nThe final result is an integrated view where interactivity in one plot automatically updates the display across all other plots, allowing for rich comparative analysis across subjects.\n\ntooltip_css &lt;- \"background-color:#27dfff; \n                font-style:bold; \n                color:black;\" \n\n# Create tooltip text combining ID and CLASS\nexam_data$tooltip &lt;- paste0(\n  \"ID: \", exam_data$ID, \"\\nClass: \", exam_data$CLASS\n)\n\n# Create 3 interactive ggplots with the same structure\np1 &lt;- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Maths\")\n\np2 &lt;- ggplot(exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"English\")\n\np3 &lt;- ggplot(exam_data, aes(x = SCIENCE)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Science\")\n\n\n# Use patchwork's vertical stacking with /\ncombined_plot &lt;- p1 / p2 / p3\n\n# Render interactive stacked plots\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 6,\n  height_svg = 8,  # Increase height for stacked layout\n  options = list(\n    opts_hover(css = \"fill: #ff9305; stroke: black; \"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip(css = tooltip_css) \n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English vs. Maths\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))  # bold & centered title\n  \nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nlibrary(crosstalk)\n\n# Use crosstalk to enable linking\nd &lt;- highlight_key(exam_data)\n\n# Plot 1: English vs. Maths\np1 &lt;- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"English\")\n\n# Plot 2: Science vs. Maths\np2 &lt;- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"Science\")\n\n# Combine into interactive subplot\nsubplot(\n  ggplotly(p1), \n  ggplotly(p2), \n  nrows = 1,         # Side-by-side layout\n  margin = 0.06, \n  shareX = FALSE, \n  shareY = FALSE,\n  titleX = TRUE, \n  titleY = TRUE\n) %&gt;%\n  layout(\n    font = list(size = 10),  # Axis font size\n    margin = list(t = 80),   # Add top margin (in pixels) to prevent title cutoff\n    annotations = list(\n      list(  # Title for left plot\n        text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n        x = 0.1, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      ),\n      list(  # Title for right plot\n        text = \"&lt;b&gt;Science vs. Maths&lt;/b&gt;\",\n        x = 0.9, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      )\n    )\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)      \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#reference",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#self-hands-on-practice-on-the-codes-in-this-section",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#self-hands-on-practice-on-the-codes-in-this-section",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Downloaded the Consumer Price Index (CPI), 2024 As Base Year Dataset from SingStat.\nlink: https://tablebuilder.singstat.gov.sg/table/TS/M213801\nStep 1: Data Import and Cleaning\n\n# Load CPI data\ncpi_raw &lt;- read_csv(\"DataEx03/CPI_editedRaw.csv\", show_col_types = FALSE)\n\n# Filter for required categories\ncpi_filtered &lt;- cpi_raw %&gt;%\n  filter(`Data Series` %in% c(\"Food\", \"Health\", \"Transport\", \"Education\"))\n\n# Pivot longer from wide to long format\ncpi_long &lt;- cpi_filtered %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"CPI\") %&gt;%\n  mutate(\n    Year = as.integer(Year),\n    CPI = as.numeric(CPI),\n    Item = `Data Series`\n  ) %&gt;%\n  select(Item, Year, CPI)\n\nStep 2: Plot Visuals all into single graph (Static)\n\n# Define color scheme\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",\n  \"Health\" = \"#377EB8\",\n  \"Transport\" = \"#4DAF4A\",\n  \"Education\" = \"#984EA3\"\n)\n\n# Build static plot\nmake_static_plot &lt;- function(category_name) {\n  ggplot(cpi_long %&gt;% filter(Item == category_name),\n         aes(x = Year, y = CPI)) +\n    geom_line(color = item_colors[category_name], size = 1.2) +\n    geom_point(color = item_colors[category_name], size = 2) +\n    labs(title = paste(\"CPI Trend:\", category_name), x = \"Year\", y = \"CPI Index\") +\n    theme_minimal() +\n    theme(plot.title = element_text(face = \"bold\", size = rel(3.5)))\n}\n\n# Combine static plots using patchwork\np10 &lt;- make_static_plot(\"Food\")\np20 &lt;- make_static_plot(\"Health\")\np30 &lt;- make_static_plot(\"Transport\")\np40 &lt;- make_static_plot(\"Education\")\n\np10 / p20 / p30 / p40 + plot_layout(heights = c(15, 15, 15, 15))\n\n\n\n\n\n\n\n\nStep 3: Plot Visuals all into combined graph (Interactive)\n\n# Define consistent colors for each category\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",       # red\n  \"Health\" = \"#377EB8\",     # blue\n  \"Transport\" = \"#4DAF4A\",  # green\n  \"Education\" = \"#984EA3\"   # purple\n)\n\n# Build interactive line chart with manual color scale\np9 &lt;- ggplot(cpi_long, aes(x = Year, y = CPI, color = Item,\n                           group = Item,\n                           tooltip = paste0(Item, \"&lt;br&gt;Year: \", Year, \"&lt;br&gt;CPI: \", round(CPI, 1)),\n                           data_id = paste(Item, Year))) +\n  geom_line_interactive(size = 1.2) +\n  geom_point_interactive(size = 2) +\n  scale_color_manual(values = item_colors) +  # &lt;- apply custom color scheme\n  labs(title = \"CPI Trend (1961–2024): Food, Health, Transport, Education\",\n       x = \"Year\", y = \"CPI Index (Base = 2024 = 100)\") +\n  theme_minimal()\n\ngirafe(ggobj = p9)\n\n\n\n\n\nFrom here, we note that the readability is not as good, hence I would plot them as individual graphs as below with interactive option.\n\n# Define consistent colors for each category\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",       # red\n  \"Health\" = \"#377EB8\",     # blue\n  \"Transport\" = \"#4DAF4A\",  # green\n  \"Education\" = \"#984EA3\"   # purple\n)\n\n# Define shared hover effect\nshared_hover_css &lt;- \"stroke: black; stroke-width: 3px; fill-opacity: 1;\"\n\n# Function to generate each interactive plot\nmake_interactive_plot &lt;- function(category_name) {\n  ggplot(cpi_long %&gt;% filter(Item == category_name),\n         aes(x = Year, y = CPI,\n             tooltip = paste0(\"Year: \", Year, \"&lt;br&gt;CPI: \", round(CPI, 1)),\n             data_id = Year)) +\n    geom_line_interactive(color = item_colors[category_name], size = 1.2) +\n    geom_point_interactive(color = item_colors[category_name], size = 2) +\n    labs(title = paste(\"CPI Trend:\", category_name),\n         x = \"Year\", y = \"CPI Index (Base = 2024 = 100)\") +\n    theme_minimal() +\n    theme(plot.title = element_text(face = \"bold\", size = rel(1.3)))\n}\n\n# Generate and display each plot one by one\ngirafe(ggobj = make_interactive_plot(\"Food\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\ngirafe(ggobj = make_interactive_plot(\"Health\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\ngirafe(ggobj = make_interactive_plot(\"Transport\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\ngirafe(ggobj = make_interactive_plot(\"Education\"),\n       width = \"100%\", width_svg = 14, height_svg = 5,\n       options = list(opts_hover(css = shared_hover_css)))\n\n\n\n\n\nStep 4: Plot Visuals all into combined graph (Interactive)\nThis code builds 4 vertically stacked interactive CPI plots and is able to show tooltips and hover highlights.\n\n# Define category colors\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",\n  \"Health\" = \"#377EB8\",\n  \"Transport\" = \"#4DAF4A\",\n  \"Education\" = \"#984EA3\"\n)\n\n# Custom tooltip style\ntooltip_css &lt;- \"background-color: white; color: black; border: 1px solid black; padding: 5px; font-size: 13px;\"\n\n# Create a reusable function for each static panel with interactivity\nmake_interactive_panel &lt;- function(category_name) {\n  ggplot(cpi_long %&gt;% filter(Item == category_name),\n         aes(x = Year, y = CPI,\n             tooltip = paste0(\"Year: \", Year, \"&lt;br&gt;CPI: \", round(CPI, 1)),\n             data_id = Year)) +\n    geom_line_interactive(color = item_colors[category_name], size = 1.2) +\n    geom_point_interactive(color = item_colors[category_name], size = 2) +\n    labs(title = category_name, x = \"Year\", y = \"CPI Index\") +\n    theme_minimal() +\n    theme(plot.title = element_text(face = \"bold\", size = rel(1.5)))\n}\n\n# Combine all plots into one patchwork layout\ncombined_plot &lt;- (\n  make_interactive_panel(\"Food\") /\n  make_interactive_panel(\"Health\") /\n  make_interactive_panel(\"Transport\") /\n  make_interactive_panel(\"Education\")\n)\n\n# Render the full interactive stacked plot\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 10,\n  height_svg = 14,\n  options = list(\n    opts_hover(css = \"fill: #ff9305; stroke: black;\"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip(css = tooltip_css)\n  )\n)\n\n\n\n\n\nNext, I combine back the graphs into a single plot to have a synchronised hoever behavious where hovering on one category (e.g., Food) displays the corresponding values for all other categories (Transport, Health, Education) at that same Year\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nInteractive:\nHover on the point to get the CPI index of the 4 categories for each year.\n\n\n\n# Define consistent colors\nitem_colors &lt;- c(\n  \"Food\" = \"#E41A1C\",\n  \"Health\" = \"#377EB8\",\n  \"Transport\" = \"#4DAF4A\",\n  \"Education\" = \"#984EA3\"\n)\n\n# Custom tooltip CSS\ntooltip_css &lt;- \"background-color: white; color: black; border: 1px solid black; padding: 5px; font-size: 13px;\"\n\n# Step 1: Create a tooltip dataset that includes all values by year\ntooltip_data &lt;- cpi_long %&gt;%\n  filter(Item %in% names(item_colors)) %&gt;%\n  pivot_wider(names_from = Item, values_from = CPI) %&gt;%\n  mutate(tooltip = paste0(\n    \"Year: \", Year, \"&lt;br&gt;\",\n    \"Food: \", round(Food, 1), \"&lt;br&gt;\",\n    \"Health: \", round(Health, 1), \"&lt;br&gt;\",\n    \"Transport: \", round(Transport, 1), \"&lt;br&gt;\",\n    \"Education: \", round(Education, 1)\n  ))\n\n# Step 2: Join the tooltip text back to original long format\ncpi_joined &lt;- cpi_long %&gt;%\n  inner_join(tooltip_data %&gt;% select(Year, tooltip), by = \"Year\") %&gt;%\n  filter(Item %in% names(item_colors))\n\n# Step 3: Create unified ggplot with interactive layers\ncombined_plot &lt;- ggplot(cpi_joined, aes(x = Year, y = CPI, group = Item)) +\n  geom_line_interactive(aes(color = Item, data_id = Year, tooltip = tooltip), size = 1.2) +\n  geom_point_interactive(aes(color = Item, data_id = Year, tooltip = tooltip), size = 2) +\n  scale_color_manual(values = item_colors) +\n  labs(title = \"CPI Trends by Category (1961–2024)\",\n       x = \"Year\", y = \"CPI Index (Base = 2024 = 100)\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = rel(1.8)),\n    legend.title = element_blank()\n  )\n\n# Step 4: Render with synchronized hover + rich tooltip\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 12,\n  height_svg = 7,\n  options = list(\n    opts_hover(css = \"stroke: black; stroke-width: 2px;\"),\n    opts_hover_inv(css = \"opacity: 0.2;\"),\n    opts_tooltip(css = tooltip_css)\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.\n\n\n\n\n\n\n\n\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"DataEx03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"DataEx03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"DataEx03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart will be as seen below:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nNow the legend is no longer on the plot.\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nNow the legend is no longer on the plot.\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#overview",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#getting-started",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "First, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"DataEx03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"DataEx03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"DataEx03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart will be as seen below:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nNow the legend is no longer on the plot.\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nNow the legend is no longer on the plot.\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html#reference",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "Getting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#the-code-chunk-3",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#the-code-chunk-3",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "ggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n:::\n9.4 Visualising Distribution with Raincloud Plot Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n9.4.1 Plotting a Half Eye graph First, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#the-code-chunk-4",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-On_Ex04a.html#the-code-chunk-4",
    "title": "Hands-on Exercise 4a",
    "section": "",
    "text": "ggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n:::"
  }
]