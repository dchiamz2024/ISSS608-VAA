[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-David’s Visual Analytics Portfolio",
    "section": "",
    "text": "Welcome to ISSS609 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03b.html",
    "title": "Hands-on Exercise 3B",
    "section": "",
    "text": "3B - Programming Animated Statistical Graphics with R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "The below packages will be used:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html#step-1.-installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html#step-1.-installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "The below packages will be used:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html#step-2.-importing-the-exercise-data-file",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html#step-2.-importing-the-exercise-data-file",
    "title": "Hands-on Exercise 2",
    "section": "Step 2. Importing the exercise data file",
    "text": "Step 2. Importing the exercise data file\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nexam_data &lt;- read_csv(\"DataEx2/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html#step-3.-trying-the-various-plots-in-the-lesson",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-On_Ex02.html#step-3.-trying-the-various-plots-in-the-lesson",
    "title": "Hands-on Exercise 2",
    "section": "Step 3. Trying the various plots in the lesson",
    "text": "Step 3. Trying the various plots in the lesson\n\n3.1 Using Annotations in Plots: ggrepel\nWithout the use of ggrepel:\n\nWe will see multiple overlaps of annotations, especially with large number of data points.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nWith the use of ggrepel:\n\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n3.2 Using Themes in Plots: ggtheme\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\nBuilt-in Themes Plot (basic colours):\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\nTo identify which Maths score bracket (interval of 5 points) has the highest count:\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Create 20 bins from 0 to 100 (width = 5)\nbin_width &lt;- 5\nbreaks &lt;- seq(0, 100, length.out = 21)\n\n# Assign each ENGLISH score to a bin\nexam_data &lt;- exam_data %&gt;%\n  mutate(bin = cut(MATHS, breaks = breaks, include.lowest = TRUE, right = FALSE))\n\n# Count frequencies per bin and compute midpoints\nbin_counts &lt;- exam_data %&gt;%\n  count(bin) %&gt;%\n  mutate(\n    bin_range = gsub(\"\\\\[|\\\\)\", \"\", bin),\n    bin_start = as.numeric(sub(\",.*\", \"\", bin_range)),\n    bin_mid = bin_start + bin_width / 2\n  )\n\n# Identify the bin with the maximum count\nmax_bin &lt;- bin_counts %&gt;%\n  filter(n == max(n))\n\n# Plot using geom_col for full customization\nggplot(bin_counts, aes(x = bin_mid, y = n)) +\n  geom_col(fill = \"grey90\", color = \"grey25\", width = bin_width) +  # all bars\n  geom_col(data = max_bin, aes(x = bin_mid, y = n),\n           fill = \"grey90\", color = \"orange\", linewidth = 1.2, width = bin_width) +  # highlight bar\n  geom_text(data = max_bin, aes(x = bin_mid, y = n + 2, label = n),\n            color = \"orange\", fontface = \"bold\", vjust = 0, size = 4) +\n  scale_x_continuous(breaks = seq(0, 100, by = 5), minor_breaks = NULL, limits = c(0, 100)) +\n  labs(title = \"Distribution of Maths Scores\",\n       x = \"English Score\",\n       y = \"Count\") +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo identify which Science score bracket (interval of 5 points) has the highest count:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo identify which English score bracket (interval of 5 points) has the highest count:\n\n\n\n\n\n\n\n\n\n\n\n3.3 Using Themes Packages in Plots: ggtheme packages\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used for the plot for the distribution of Math scores.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIn the example below, Wall Street Journal theme is used for the plot for the distribution of Math scores. - This is done by changing it from theme_economist() to theme_wsj()\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj() +\n theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n3.4 Working with hrbthemes Packages\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\nCode Chunk 1:\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nCode Chunk 2:\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nWhat are the differences between Code Chunk 1 and 2?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n3.5 Composing Plots with Multiple Graphs\nThis section will demonstrate how to compose plots by combining multiple graphs.\nFirst, 3 distinct statistical graphs are drawn using the code chunks below and assigned to p1, p2 and p3 respectively.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y= ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n3.5.1 Creating Composite Graphics: pathwork methods.\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n3.5.2 Composing Two ggplot2 Graphs.\nNext, we will combine p1 and p2 to create a composite of two histograms using patchwork. Note how the syntax is used to create the plot.\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n3.5.3 Composing Three ggplot2 Graphs and in specific position relative to each other.\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n3.5.4 Creating a Composite Figure with Tag.\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n3.5.5 Creating Figures with Inserts.\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n3.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n3.6 Extra Practice using patchwork and ggtheme\nSelf drew a few more plots p4 to p6 and updated p3 to p3a:\n\np4 &lt;- ggplot(data=exam_data, \n             aes(x = SCIENCE)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Science scores\")\n\n\n# Top 10 for Maths vs Science\ntop10_p5 &lt;- exam_data %&gt;%\n  arrange(desc(MATHS + SCIENCE)) %&gt;%\n  slice_head(n = 10)\n\n# Top 3 for Maths vs Science (with)\ntop3_p5 &lt;- top10_p5 %&gt;%\n  arrange(desc(MATHS + SCIENCE)) %&gt;%\n  slice_head(n = 3)\n\np5 &lt;- ggplot(exam_data, aes(x = MATHS, y = SCIENCE)) +\n  geom_point() +\n  geom_point(data = top10_p5, aes(x = MATHS, y = SCIENCE), color = \"blue\", size = 2) +\n  geom_text_repel(data = top3_p5, aes(label = ID), color = \"orange\", fontface = \"bold\", size = 4) +\n  geom_smooth(method = lm, size = 0.5) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"Science scores versus Maths scores for Primary 3\")\n\n\n# Top 10 for English vs Science\ntop10_p6 &lt;- exam_data %&gt;%\n  arrange(desc(ENGLISH + SCIENCE)) %&gt;%\n  slice_head(n = 10)\n\n# Top 3 for English vs Science\ntop3_p6 &lt;- top10_p6 %&gt;%\n  arrange(desc(ENGLISH + SCIENCE)) %&gt;%\n  slice_head(n = 3)\n\np6 &lt;- ggplot(exam_data, aes(x = ENGLISH, y = SCIENCE)) +\n  geom_point() +\n  geom_point(data = top10_p6, aes(x = ENGLISH, y = SCIENCE), color = \"blue\", size = 2) +\n  geom_text_repel(data = top3_p6, aes(label = ID), color = \"orange\", fontface = \"bold\", size = 4) +\n  geom_smooth(method = lm, size = 0.5) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"Science scores versus English scores for Primary 3\")\n\n\n# Top 10 for English vs Maths\ntop10_p3a &lt;- exam_data %&gt;%\n  arrange(desc(ENGLISH + MATHS)) %&gt;%\n  slice_head(n = 10)\n\n# Top 3 for English vs Maths\ntop3_p3a &lt;- top10_p3a %&gt;%\n  arrange(desc(ENGLISH + MATHS)) %&gt;%\n  slice_head(n = 3)\n\np3a &lt;- ggplot(exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_point(data = top10_p3a, aes(x = MATHS, y = ENGLISH), color = \"blue\", size = 2) +\n  geom_text_repel(data = top3_p3a, aes(label = ID), color = \"orange\", fontface = \"bold\", size = 4) +\n  geom_smooth(method = lm, size = 0.5) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\nThe Top 10 students from each plot are highlighted in Blue with the Top students labelled in Orange.\n\npatchwork &lt;- p3a / p5 / p6\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\nConclusion from the extra practice plots:\nIt was found that “Student036” appeared in all 3 graphs in the Top 3 category and therefore we can postulate that he/she is likely the top student for the Primary 3 cohort.\n\nDraw the plot to illustrate the Gender distribution across the Primary 3 Classes.\n\n# Load required libraries\nlibrary(dplyr)\n\n# Count gender per class\ngender_counts &lt;- exam_data %&gt;%\n  group_by(CLASS, GENDER) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Plot the bar chart\np7 &lt;-  ggplot(gender_counts, aes(x = CLASS, y = count, fill = GENDER)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Gender Distribution by Class\",\n       x = \"Class\",\n       y = \"Number of Students\") +\n  scale_fill_manual(values = c(\"Male\" = \"#1f77b4\", \"Female\" = \"pink\")) +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\nDraw the plot to illustrate the Racial distribution across the Primary 3 Classes.\n\n# Load libraries\nlibrary(dplyr)\n\n# Ensure RACE is in the desired stacking order\nexam_data$RACE &lt;- factor(exam_data$RACE, levels = c(\"Others\", \"Indian\", \"Malay\", \"Chinese\"))\n\n# Summarize counts of each race per class\nrace_counts &lt;- exam_data %&gt;%\n  group_by(CLASS, RACE) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Plot stacked bar chart\np8 &lt;-  ggplot(race_counts, aes(x = CLASS, y = count, fill = RACE)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c(\n    \"Chinese\" = \"#1f77b4\",  # blue (bottom)\n    \"Malay\"   = \"#2ca02c\",  # green\n    \"Indian\"  = \"yellow\",   # yellow\n    \"Others\"  = \"brown\"     # brown\n  )) +\n  labs(title = \"Racial Distribution by Class\",\n       x = \"Class\",\n       y = \"Number of Students\",\n       fill = \"Race\",\n       axis_title_size = 18) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nCombine both plots (Bar Charts) above into a single figure.\n\npatchwork &lt;- (p7 / p8)\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\nPlot the Racial Composition for entire Primary 3 Cohort\n\n# Calculate race proportion\nlibrary(dplyr)\n\nrace_totals &lt;- exam_data %&gt;%\n  count(RACE) %&gt;%\n  mutate(\n    prop = n / sum(n),\n    label = paste0(RACE, \"\\n\", scales::percent(prop))\n  )\n\nggplot(race_totals, aes(x = \"\", y = prop, fill = RACE)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 4) +\n  scale_fill_manual(values = c(\n    \"Chinese\" = \"#1f77b4\",\n    \"Malay\"   = \"#2ca02c\",\n    \"Indian\"  = \"yellow\",\n    \"Others\"  = \"brown\"\n  )) +\n  labs(title = \"Race Composition (Pie Chart)\", fill = \"Race\") +\n  theme_void() +\n  theme(plot.title = element_text(size = 20, face = \"bold\", hjust = 0.5))\n\n\n\n\n\n\n\n\nAdjusted to remove the Legend and use Labels (through ggrepel) to point to the “Race” colour and also to state the percentage of each race composition for better specificity.\n\n# Load libraries\nlibrary(dplyr)\nlibrary(scales)\n\n# Calculate race proportions\nrace_totals &lt;- exam_data %&gt;%\n  count(RACE) %&gt;%\n  mutate(\n    prop = n / sum(n),\n    label = paste0(RACE, \"\\n\", percent(prop))\n  ) %&gt;%\n  arrange(desc(RACE)) %&gt;%  # Ensure consistent stacking order\n  mutate(ypos = cumsum(prop) - 0.5 * prop)\n\n# Plot pie chart with external labels using ggrepel and no legend\np9 &lt;- ggplot(race_totals, aes(x = \"\", y = prop, fill = RACE)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(\"y\") +\n  geom_label_repel(\n    aes(y = ypos, label = label),\n    nudge_x = 1.0,\n    direction = \"y\",\n    size = 4.5,\n    show.legend = FALSE,\n    segment.color = \"grey30\"\n  ) +\n  scale_fill_manual(values = c(\n    \"Chinese\" = \"#1f77b4\",\n    \"Malay\"   = \"#2ca02c\",\n    \"Indian\"  = \"yellow\",\n    \"Others\"  = \"brown\"\n  )) +\n  labs(title = \"Primary 3 Cohort Race Composition\") +\n  theme_void() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\", hjust = 0.5),\n    legend.position = \"none\"  # &lt;-- removes the legend\n  )\n\n\n\n\n\n\n\n\n\n\nCombine all three plots above into a single figure.\n\npatchwork &lt;- p9 | (p7 / p8)\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\nAfternote: The “axis-lines” shows while the “legend” reappears on the Pie Chart (not sure why, suspect it is some coding error or settings), hence I would need to find a way to remove them for aesthetics point of view."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\nNote: Pacman is like a package manager, Tidyverse are packages for data science eg. plotting, wrangling, cleaning, visualization etc\n\npacman::p_load(tidyverse) \n\n\n\n\nNote: if you did not run the first code chunk tidyverse, this will indicate not found. read_csv is a code from tidyverse\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\nNote: Pacman is like a package manager, Tidyverse are packages for data science eg. plotting, wrangling, cleaning, visualization etc\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Note: if you did not run the first code chunk tidyverse, this will indicate not found. read_csv is a code from tidyverse\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.\n\n\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse,\n               ggplot2) \n\n\n\n\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"DataEx03/Exam_data.csv\")\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n How does it work?\nIt extends ggplot2 with:\n\ninteractive geom functions: geom_point_interactive(), geom_col_interactive(), etc.\ninteractive scale functions: scale_color_continuous_interactive(), scale_fill_manual_interactive(), etc.\ninteractive facet functions: facet_wrap_interactive(), facet_grid_interactive() with labeller_interactive().\ninteractive guide functions: guide_colorbar_interactive(), guide_legend_interactive().\ninteractive theme elements: element_line_interactive(), element_rect_interactive(), label_interactive().\n\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:#27dfff; #&lt;&lt;here\n                font-style:bold; \n                color:black;\" #&lt;&lt;here\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;here\n    opts_tooltip(    #&lt;&lt;here\n      css = tooltip_css)) #&lt;&lt;here\n)                                        \n\nNotice that the inital plot had a background colour of the tooltip as black and the font colour as white and bold.\nNow with the adjusted code chunk, the background colour of the tooltip is blue and the font colour as black and bold.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\n\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning ⚠️\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe patchwork package was used to stack multiple ggplot objects vertically using the / operator. This layout was wrapped within the girafe() function to render a single interactive widget.\nCustom styling was applied using opts_hover() and opts_hover_inv() inside girafe() to enhance interactivity. When a student is selected, their dot turns dark, while other points fade slightly in the background. Additionally, the colour of the tooltip background was customised to blue and the font colour as black and bold.\nThe final result is an integrated view where interactivity in one plot automatically updates the display across all other plots, allowing for rich comparative analysis across subjects.\n\ntooltip_css &lt;- \"background-color:#27dfff; \n                font-style:bold; \n                color:black;\" \n\n# Create tooltip text combining ID and CLASS\nexam_data$tooltip &lt;- paste0(\n  \"ID: \", exam_data$ID, \"\\nClass: \", exam_data$CLASS\n)\n\n# Create 3 interactive ggplots with the same structure\np1 &lt;- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Maths\")\n\np2 &lt;- ggplot(exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"English\")\n\np3 &lt;- ggplot(exam_data, aes(x = SCIENCE)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Science\")\n\n\n# Use patchwork's vertical stacking with /\ncombined_plot &lt;- p1 / p2 / p3\n\n# Render interactive stacked plots\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 6,\n  height_svg = 8,  # Increase height for stacked layout\n  options = list(\n    opts_hover(css = \"fill: #ff9305; stroke: black; \"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip(css = tooltip_css) \n  )\n)\n\n\n\n\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English vs. Maths\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))  # bold & centered title\n  \nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nlibrary(crosstalk)\n\n# Use crosstalk to enable linking\nd &lt;- highlight_key(exam_data)\n\n# Plot 1: English vs. Maths\np1 &lt;- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"English\")\n\n# Plot 2: Science vs. Maths\np2 &lt;- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"Science\")\n\n# Combine into interactive subplot\nsubplot(\n  ggplotly(p1), \n  ggplotly(p2), \n  nrows = 1,         # Side-by-side layout\n  margin = 0.06, \n  shareX = FALSE, \n  shareY = FALSE,\n  titleX = TRUE, \n  titleY = TRUE\n) %&gt;%\n  layout(\n    font = list(size = 10),  # Axis font size\n    margin = list(t = 80),   # Add top margin (in pixels) to prevent title cutoff\n    annotations = list(\n      list(  # Title for left plot\n        text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n        x = 0.1, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      ),\n      list(  # Title for right plot\n        text = \"&lt;b&gt;Science vs. Maths&lt;/b&gt;\",\n        x = 0.9, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      )\n    )\n  )\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)      \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#learning-outcome",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#getting-started",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "First, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse,\n               ggplot2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"DataEx03/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n How does it work?\nIt extends ggplot2 with:\n\ninteractive geom functions: geom_point_interactive(), geom_col_interactive(), etc.\ninteractive scale functions: scale_color_continuous_interactive(), scale_fill_manual_interactive(), etc.\ninteractive facet functions: facet_wrap_interactive(), facet_grid_interactive() with labeller_interactive().\ninteractive guide functions: guide_colorbar_interactive(), guide_legend_interactive().\ninteractive theme elements: element_line_interactive(), element_rect_interactive(), label_interactive().\n\n\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactivity-1",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\n\n\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:#27dfff; #&lt;&lt;here\n                font-style:bold; \n                color:black;\" #&lt;&lt;here\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;here\n    opts_tooltip(    #&lt;&lt;here\n      css = tooltip_css)) #&lt;&lt;here\n)                                        \n\nNotice that the inital plot had a background colour of the tooltip as black and the font colour as white and bold.\nNow with the adjusted code chunk, the background colour of the tooltip is blue and the font colour as black and bold.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\n\n\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\n\n\n\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #ff9305;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                                                \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning ⚠️\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe patchwork package was used to stack multiple ggplot objects vertically using the / operator. This layout was wrapped within the girafe() function to render a single interactive widget.\nCustom styling was applied using opts_hover() and opts_hover_inv() inside girafe() to enhance interactivity. When a student is selected, their dot turns dark, while other points fade slightly in the background. Additionally, the colour of the tooltip background was customised to blue and the font colour as black and bold.\nThe final result is an integrated view where interactivity in one plot automatically updates the display across all other plots, allowing for rich comparative analysis across subjects.\n\ntooltip_css &lt;- \"background-color:#27dfff; \n                font-style:bold; \n                color:black;\" \n\n# Create tooltip text combining ID and CLASS\nexam_data$tooltip &lt;- paste0(\n  \"ID: \", exam_data$ID, \"\\nClass: \", exam_data$CLASS\n)\n\n# Create 3 interactive ggplots with the same structure\np1 &lt;- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Maths\")\n\np2 &lt;- ggplot(exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"English\")\n\np3 &lt;- ggplot(exam_data, aes(x = SCIENCE)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID, tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  coord_cartesian(xlim = c(0, 100)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  ggtitle(\"Science\")\n\n\n# Use patchwork's vertical stacking with /\ncombined_plot &lt;- p1 / p2 / p3\n\n# Render interactive stacked plots\ngirafe(\n  ggobj = combined_plot,\n  width_svg = 6,\n  height_svg = 8,  # Increase height for stacked layout\n  options = list(\n    opts_hover(css = \"fill: #ff9305; stroke: black; \"),\n    opts_hover_inv(css = \"opacity:0.2;\"),\n    opts_tooltip(css = tooltip_css) \n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE,\n        type = 'scatter',\n        mode = 'markers') %&gt;%\n  layout(\n    title = list(\n      text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n      x = 0.5,           # center the title\n      xanchor = \"center\"\n    )\n  )\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English vs. Maths\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))  # bold & centered title\n  \nggplotly(p)\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class crosstalk::SharedData. Visit this link to learn more about crosstalk.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nlibrary(crosstalk)\n\n# Use crosstalk to enable linking\nd &lt;- highlight_key(exam_data)\n\n# Plot 1: English vs. Maths\np1 &lt;- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"English\")\n\n# Plot 2: Science vs. Maths\np2 &lt;- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(x = \"Maths\", y = \"Science\")\n\n# Combine into interactive subplot\nsubplot(\n  ggplotly(p1), \n  ggplotly(p2), \n  nrows = 1,         # Side-by-side layout\n  margin = 0.06, \n  shareX = FALSE, \n  shareY = FALSE,\n  titleX = TRUE, \n  titleY = TRUE\n) %&gt;%\n  layout(\n    font = list(size = 10),  # Axis font size\n    margin = list(t = 80),   # Add top margin (in pixels) to prevent title cutoff\n    annotations = list(\n      list(  # Title for left plot\n        text = \"&lt;b&gt;English vs. Maths&lt;/b&gt;\",\n        x = 0.1, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      ),\n      list(  # Title for right plot\n        text = \"&lt;b&gt;Science vs. Maths&lt;/b&gt;\",\n        x = 0.9, xref = \"paper\",\n        y = 1.05, yref = \"paper\",\n        showarrow = FALSE,\n        font = list(size = 20)  # 2x axis font size\n      )\n    )\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)      \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-On_Ex03a.html#reference",
    "title": "Hands-on Exercise 3A",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  }
]