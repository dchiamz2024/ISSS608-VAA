---
title: "Hands-on Exercise 2"
author: "David Chiam"
date: "24 April 2025"
---

## Step 1. Installing and loading the required libraries

The below packages will be used:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```

## Step 2. Importing the exercise data file

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.
-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

```{r}
exam_data <- read_csv("DataEx2/Exam_data.csv")
```

## Step 3. Trying the various plots in the lesson

### 3.1 Using Annotations in Plots: ggrepel

Without the use of ggrepel:

-   We will see multiple overlaps of annotations, especially with large number of data points.

```{r, warning=FALSE, message=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

With the use of ggrepel:

-   **ggrepel** is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text as in our examples on the right.

-   We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

```{r, warning=FALSE, message=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

### 3.2 Using Themes in Plots: ggtheme

ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

Normal Themes Plot:

```{r}

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

To identify which **Maths** score bracket (interval of 5 points) has the highest count:

```{r}

library(ggplot2)
library(dplyr)

# Create 20 bins from 0 to 100 (width = 5)
bin_width <- 5
breaks <- seq(0, 100, length.out = 21)

# Assign each ENGLISH score to a bin
exam_data <- exam_data %>%
  mutate(bin = cut(MATHS, breaks = breaks, include.lowest = TRUE, right = FALSE))

# Count frequencies per bin and compute midpoints
bin_counts <- exam_data %>%
  count(bin) %>%
  mutate(
    bin_range = gsub("\\[|\\)", "", bin),
    bin_start = as.numeric(sub(",.*", "", bin_range)),
    bin_mid = bin_start + bin_width / 2
  )

# Identify the bin with the maximum count
max_bin <- bin_counts %>%
  filter(n == max(n))

# Plot using geom_col for full customization
ggplot(bin_counts, aes(x = bin_mid, y = n)) +
  geom_col(fill = "grey90", color = "grey25", width = bin_width) +  # all bars
  geom_col(data = max_bin, aes(x = bin_mid, y = n),
           fill = "grey90", color = "orange", linewidth = 1.2, width = bin_width) +  # highlight bar
  geom_text(data = max_bin, aes(x = bin_mid, y = n + 2, label = n),
            color = "orange", fontface = "bold", vjust = 0, size = 4) +
  scale_x_continuous(breaks = seq(0, 100, by = 5), minor_breaks = NULL, limits = c(0, 100)) +
  labs(title = "Distribution of Maths Scores",
       x = "English Score",
       y = "Count") +
  theme_gray()
```

```{r, echo=FALSE}

ggplot(data=exam_data, 
             aes(x = SCIENCE)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Science scores") 
```

To identify which **Science** score bracket (interval of 5 points) has the highest count:

```{r, echo=FALSE}

library(ggplot2)
library(dplyr)

# Create 20 bins from 0 to 100 (width = 5)
bin_width <- 5
breaks <- seq(0, 100, length.out = 21)

# Assign each ENGLISH score to a bin
exam_data <- exam_data %>%
  mutate(bin = cut(SCIENCE, breaks = breaks, include.lowest = TRUE, right = FALSE))

# Count frequencies per bin and compute midpoints
bin_counts <- exam_data %>%
  count(bin) %>%
  mutate(
    bin_range = gsub("\\[|\\)", "", bin),
    bin_start = as.numeric(sub(",.*", "", bin_range)),
    bin_mid = bin_start + bin_width / 2
  )

# Identify the bin with the maximum count
max_bin <- bin_counts %>%
  filter(n == max(n))

# Plot using geom_col for full customization
ggplot(bin_counts, aes(x = bin_mid, y = n)) +
  geom_col(fill = "grey90", color = "grey25", width = bin_width) +  # all bars
  geom_col(data = max_bin, aes(x = bin_mid, y = n),
           fill = "grey90", color = "orange", linewidth = 1.2, width = bin_width) +  # highlight bar
  geom_text(data = max_bin, aes(x = bin_mid, y = n + 2, label = n),
            color = "orange", fontface = "bold", vjust = 0, size = 4) +
  scale_x_continuous(breaks = seq(0, 100, by = 5), minor_breaks = NULL, limits = c(0, 100)) +
  labs(title = "Distribution of Science Scores",
       x = "English Score",
       y = "Count") +
  theme_gray()
```

```{r, echo=FALSE}

ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of English scores") 
```

To identify which **English** score bracket (interval of 5 points) has the highest count:

```{r, echo=FALSE}

library(ggplot2)
library(dplyr)

# Create 20 bins from 0 to 100 (width = 5)
bin_width <- 5
breaks <- seq(0, 100, length.out = 21)

# Assign each ENGLISH score to a bin
exam_data <- exam_data %>%
  mutate(bin = cut(ENGLISH, breaks = breaks, include.lowest = TRUE, right = FALSE))

# Count frequencies per bin and compute midpoints
bin_counts <- exam_data %>%
  count(bin) %>%
  mutate(
    bin_range = gsub("\\[|\\)", "", bin),
    bin_start = as.numeric(sub(",.*", "", bin_range)),
    bin_mid = bin_start + bin_width / 2
  )

# Identify the bin with the maximum count
max_bin <- bin_counts %>%
  filter(n == max(n))

# Plot using geom_col for full customization
ggplot(bin_counts, aes(x = bin_mid, y = n)) +
  geom_col(fill = "grey90", color = "grey25", width = bin_width) +  # all bars
  geom_col(data = max_bin, aes(x = bin_mid, y = n),
           fill = "grey90", color = "orange", linewidth = 1.2, width = bin_width) +  # highlight bar
  geom_text(data = max_bin, aes(x = bin_mid, y = n + 2, label = n),
            color = "orange", fontface = "bold", vjust = 0, size = 4) +
  scale_x_continuous(breaks = seq(0, 100, by = 5), minor_breaks = NULL, limits = c(0, 100)) +
  labs(title = "Distribution of English Scores",
       x = "English Score",
       y = "Count") +
  theme_gray()
```

### 3.3 Using Themes in Plots: ggtheme

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), ‘Stata’, ‘Excel’, and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

In the example below, *The Economist* theme is used for the plot for the distribution of Math scores.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

In the example below, *Wall Stree Journal* theme is used for the plot for the distribution of Math scores. - This is done by changing it from `theme_economist()` to `theme_wsj()`

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_wsj() +
 theme(plot.title = element_text(size = 14, hjust = 0.5))
```
