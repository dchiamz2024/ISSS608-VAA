---
title: "Hands-on Exercise 3A"
description: ""
author: "David Chiam"
date: "30 April 2025"
date-modified: "30 April 2025"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **3A - Programming Interactive Data Visualisation with R**

## **3.1 Learning Outcome**

In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

## **3.2 Getting Started**

First, write a code chunk to check, install and launch the following R packages:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making ‘ggplot’ graphics interactive.
-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.
-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.
-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

The code chunk below will be used to accomplish the task.

```{r eval=FALSE}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

## **3.3 Importing Data**

In this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.

The code chunk below `read_csv()` of **readr** package is used to import *Exam_data.csv* data file into R and save it as an tibble data frame called `exam_data`.

```{r eval=FALSE}
exam_data <- read_csv("chap03/data/Exam_data.csv")
```

## **3.4 Interactive Data Visualisation - ggiraph methods**

[ggiraph](https://davidgohel.github.io/ggiraph/index.html) is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) that can understand three arguments:

-   `Tooltip`: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.
-   `Onclick`: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.
-   `Data_id`: a column of data-sets that contain an id to be associated with elements.

If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://www.ardata.fr/ggiraph-book/selections.html) for more detail explanation.

::: How-Does-it-Work
![](/Images/teacher.png){width="42"} <span style="font-size: 30px; vertical-align: middle;"><strong>How does it work?</strong></span>

It extends **ggplot2** with:

-   interactive geom functions: `geom_point_interactive()`, `geom_col_interactive()`, etc.
-   interactive scale functions: `scale_color_continuous_interactive()`, `scale_fill_manual_interactive()`, etc.
-   interactive facet functions: `facet_wrap_interactive()`, `facet_grid_interactive()` with `labeller_interactive()`.
-   interactive guide functions: `guide_colorbar_interactive()`, `guide_legend_interactive()`.
-   interactive theme elements: `element_line_interactive()`, `element_rect_interactive()`, `label_interactive()`.
:::

### **3.4.1 Tooltip effect with *tooltip* aesthetic**

Below shows a typical code chunk to plot an interactive statistical graph by using **ggiraph** package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive svg object.
