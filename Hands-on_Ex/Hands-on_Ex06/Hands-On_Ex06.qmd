---
title: "Hands-on Exercise 6"
description: ""
author: "David Chiam"
date: "20 May 2025"
date-modified: "21 May 2025"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **07 - Visualising and Analysing Time-oriented Data**

## **10.1 Hands-on Exercise Outcome**

By the end of this hands-on exercise we would have tried creating the followings data visualisation by using R packages:

-   plotting a calender heatmap by using ggplot2 functions,
-   plotting a cycle plot by using ggplot2 function,
-   plotting a slopegraph
-   plotting a horizon chart

## **10.2 Getting Started Installing and launching R packages**

In this hands-on exercise, we will install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.

```{r}

pacman::p_load(scales, viridis, 
               lubridate, ggthemes, 
               gridExtra, readxl, 
               knitr, data.table, 
               tidyverse,
               CGPfunctions, ggHoriPlot)

```

## **10.3 Plotting Calendar Heatmap**

In this section, we will beplotting a calender heatmaps, like the one below, programmatically by using ggplot2 package.

![](/Images/Hands-on_Ex6_Image01.png){fig-align="center"}

By end of this section, we will be able to:

-   plot a calender heatmap by using ggplot2 functions and extension,
-   to write function using R programming,
-   to derive specific date and time related field by using base R and lubridate packages
-   to perform data preparation task by using tidyr and dplyr packages.

### **10.3.1 The Data**

For the purpose of this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.

### **10.3.2 Importing the data**

The code chunk below to was used to import *eventlog.csv* file into R environment and called the data frame as *attacks*.

```{r}

attacks <- read_csv("DataEx06/eventlog.csv")
```

### **10.3.3 Examining the data structure**

As a good practice, we aim to examine the imported data frame before further analysis is performed.

For example, *kable()* can be used to review the structure of the imported data frame.

```{r}

kable(head(attacks))
```

There are three columns, namely *timestamp*, *source_country* and *tz*.

-   *timestamp* field stores date-time values in POSIXct format.
-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.
-   *tz* field stores time zone of the source IP address.

### **10.3.4 Data Preparation**

Step 1: Deriving *weekday* and *hour of day* fields

Before we can plot the calender heatmap, two new fields namely *wkday* and *hour* need to be derived. In this step, we will write a function to perform the task.

```{r}

make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
}

```

::: callout-note
-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and
-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.
:::

Step 2: Deriving the attacks tibble data frame

```{r}

wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

::: callout-note
Beside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting
:::

Table below shows the tidy tibble table after processing.

```{r}

kable(head(attacks))

```

### **10.3.5 Building the Calendar Heatmaps**

```{r}

grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

::: callout-tip
## Things to learn from the code chunk

-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.
-   a new field called *n* is derived by using `group_by()` and `count()` functions.
-   `na.omit()` is used to exclude missing value.
-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.
-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.
-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.
-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).
:::

Then we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.

### **10.3.6 Building Multiple Calendar Heatmaps**

**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.

::: panel-tabset
## The Plot

```{r, echo=FALSE}

top_countries <- attacks %>%
  count(source_country, name = "total_attacks", sort = TRUE) %>%
  slice_max(total_attacks, n = 4) %>%
  pull(source_country)

grouped_top4 <- attacks %>%
  filter(source_country %in% top_countries) %>%
  count(source_country, wkday, hour, name = "n") %>%
  ungroup() %>%
  na.omit()

ggplot(grouped_top4,
       aes(x = hour, y = wkday, fill = n)) +
  geom_tile(color = "white", size = 0.1) +
  facet_wrap(~ source_country, ncol = 2) +             # 2 columns × 2 rows
  coord_equal() +
  theme_tufte(base_family = "Helvetica") +
  scale_fill_gradient(
    name = "# of attacks",
    low  = "sky blue",
    high = "dark blue"
  ) +
  labs(
    x     = NULL,
    y     = NULL,
    title = "Attacks by Weekday & time of the day"
  ) +
  theme(
    axis.ticks       = element_blank(),
    plot.title       = element_text(hjust = 0.5),
    strip.text       = element_text(face = "bold"),
    legend.title     = element_text(size = 8),
    legend.text      = element_text(size = 6)
  )
```

## The Code Chunk

```{r, eval=FALSE}

top_countries <- attacks %>%
  count(source_country, name = "total_attacks", sort = TRUE) %>%
  slice_max(total_attacks, n = 4) %>%
  pull(source_country)

grouped_top4 <- attacks %>%
  filter(source_country %in% top_countries) %>%
  count(source_country, wkday, hour, name = "n") %>%
  ungroup() %>%
  na.omit()

ggplot(grouped_top4,
       aes(x = hour, y = wkday, fill = n)) +
  geom_tile(color = "white", size = 0.1) +
  facet_wrap(~ source_country, ncol = 2) +             # 2 columns × 2 rows
  coord_equal() +
  theme_tufte(base_family = "Helvetica") +
  scale_fill_gradient(
    name = "# of attacks",
    low  = "sky blue",
    high = "dark blue"
  ) +
  labs(
    x     = NULL,
    y     = NULL,
    title = "Attacks by Weekday & time of the day"
  ) +
  theme(
    axis.ticks       = element_blank(),
    plot.title       = element_text(hjust = 0.5),
    strip.text       = element_text(face = "bold"),
    legend.title     = element_text(size = 8),
    legend.text      = element_text(size = 6)
  )

```
:::

### **10.3.7 Plotting Multiple Calendar Heatmaps**

Step 1: Deriving attack by country object

In order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:

-   count the number of attacks by country,
-   calculate the percent of attackes by country, and
-   save the results in a tibble data frame.

```{r}

attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

Step 2: Preparing the tidy data frame

In this step, you are required to extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).

```{r}

top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()

```

### **10.3.8 Plotting Multiple Calendar Heatmaps**

Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.

```{r}

ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

## **10.4 Plotting Cycle Plot**

In this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions. A sample cycle plot is as below.

![](/Images/Hands-on_Ex6_Image02.png){fig-align="center"}

### **10.4.1 Step 1: Data Import**

For the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.

The code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.

```{r}

air <- read_excel("DataEx06/arrivals_by_air.xlsx")
```

### **10.4.2 Step 2: Deriving month and year fields**

Next, two new fields called *month* and *year* are derived from *Month-Year* field.

```{r}

air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

### **10.4.3 Step 3: Extracting the target country**

Next, the code chunk below is use to extract data for the target country (i.e. Vietnam)

```{r}

Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

### **10.4.4 Step 4: Computing year average arrivals by month**

The code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.

```{r}

hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))

```

### **10.4.5 Srep 5: Plotting the cycle plot**

The code chunk below is used to plot the cycle plot.

```{r}

ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

## **10.5 Plotting Slopegraph**

In this section you will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.

Before getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about `newggslopegraph()` and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).

### **10.5.1 Step 1: Data Import**

Import the rice data set into R environment and examine the headers by using the code chunk below.

```{r}

rice <- read_csv("DataEx06/rice.csv")

kable(head(rice))
```

### **10.5.2 Step 2: Plotting the slopegraph**

Next, code chunk below will be used to plot a basic slopegraph as shown below.

```{r}

rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "adapted & replotted by: David Chiam")

```

::: callout-tip
## Thing to learn from the code chunk above

For effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.
:::

## **10.6 Self Hands-on Practice on the codes in this section**

![](/Images/Hands-on-Practice.png){width="558"}

## Tryout 1 on: Covid-19 Dataset from ourworldindata

### **Step 1: Data Import (Covid-19 cases)**

```{r}

library(tsibble)
library(feasts)

# Pull in the full OWID COVID dataset
owid <- readr::read_csv(
  "https://covid.ourworldindata.org/data/owid-covid-data.csv",
  col_types = cols(
    iso_code = col_character(),
    location = col_character(),
    date     = col_date(format = ""),
    new_cases = col_double(),
    new_deaths = col_double(),
    # you can add more columns here as needed
  )
)

```

### **Step 2: Taking a Glimpse and Understanding the Dataset**

Look through the dataset that has been loaded.

```{r}

# 1. Column names
print(colnames(owid))

# 2. Glimpse structure
glimpse(owid)

# 3. First 6 rows
knitr::kable(head(owid), caption = "First six rows of the OWID COVID dataset")

# 4. Quick summary of key numeric fields
summary(select(owid, new_cases, new_deaths, total_cases, total_deaths, people_vaccinated))
```

I will only be extracting the Data for Singapore in this tryout.

```{r}

sg <- owid %>%
  filter(location == "Singapore") %>%
  select(date, new_cases, new_deaths)

# Convert to a tsibble
sg_ts <- sg %>%
  as_tsibble(index = date)
```

First we would like to see the number of Daily new Covid-19 cases and Deaths over the period of 2020 to 2024.

```{r}
#| code-fold: true

sg_long <- sg %>% pivot_longer(-date, names_to="metric", values_to="count")

ggplot(sg_long, aes(date, count, color=metric)) +
  geom_line() +
  labs(
    title = "Daily New COVID-19 Cases vs Deaths (Singapore)",
    x = "Date", y = "Count",
    color = ""
  ) +
  theme_minimal()
```

### **Step 3: Plotting the Heatmaps by Daily New Cases**

I would imagine the plots to show how many daily cases per day. Given that that are alot of data points, I envisage the plot to be sectorised by months of the year and the individual dates in the month.

The below code chunks will plot the Calendar Heatmap (Day × Month) of daily new cases for each year.

::: panel-tabset
### 2020 Daily New Cases

```{r}
#| code-fold: true

sg_ts %>%
  # 1. Extract year/month/day
  mutate(
    year  = as.integer(format(date, "%Y")),
    month = factor(format(date, "%b"), levels = month.abb),
    day   = as.integer(format(date, "%d"))
  ) %>%
  # 2. Keep only 2020
  filter(year == 2020) %>%
  # 3. Plot without needing a facet (single year)
  ggplot(aes(x = day, y = month, fill = new_cases)) +
    geom_tile(color = "white") +
    scale_fill_viridis_c(
      trans    = "sqrt",
      na.value = "grey90",
      name     = "New Cases"
    ) +
    labs(
      title = "Calendar Heatmap: Daily New Cases in Singapore (2020)",
      x     = "Day of Month",
      y     = NULL
    ) +
    theme_minimal() +
    theme(
      axis.text.y   = element_text(size = 8),
      panel.grid    = element_blank()
    )
```

### 2021 Daily New Cases

```{r}
#| code-fold: true

sg_ts %>%
  # 1. Extract year/month/day
  mutate(
    year  = as.integer(format(date, "%Y")),
    month = factor(format(date, "%b"), levels = month.abb),
    day   = as.integer(format(date, "%d"))
  ) %>%
  # 2. Keep only 2021
  filter(year == 2021) %>%
  # 3. Plot without needing a facet (single year)
  ggplot(aes(x = day, y = month, fill = new_cases)) +
    geom_tile(color = "white") +
    scale_fill_viridis_c(
      trans    = "sqrt",
      na.value = "grey90",
      name     = "New Cases"
    ) +
    labs(
      title = "Calendar Heatmap: Daily New Cases in Singapore (2021)",
      x     = "Day of Month",
      y     = NULL
    ) +
    theme_minimal() +
    theme(
      axis.text.y   = element_text(size = 8),
      panel.grid    = element_blank()
    )
```

### 2022 Daily New Cases

```{r}
#| code-fold: true

sg_ts %>%
  # 1. Extract year/month/day
  mutate(
    year  = as.integer(format(date, "%Y")),
    month = factor(format(date, "%b"), levels = month.abb),
    day   = as.integer(format(date, "%d"))
  ) %>%
  # 2. Keep only 2022
  filter(year == 2022) %>%
  # 3. Plot without needing a facet (single year)
  ggplot(aes(x = day, y = month, fill = new_cases)) +
    geom_tile(color = "white") +
    scale_fill_viridis_c(
      trans    = "sqrt",
      na.value = "grey90",
      name     = "New Cases"
    ) +
    labs(
      title = "Calendar Heatmap: Daily New Cases in Singapore (2022)",
      x     = "Day of Month",
      y     = NULL
    ) +
    theme_minimal() +
    theme(
      axis.text.y   = element_text(size = 8),
      panel.grid    = element_blank()
    )
```

### 2023 Daily New Cases

```{r}
#| code-fold: true

sg_ts %>%
  # 1. Extract year/month/day
  mutate(
    year  = as.integer(format(date, "%Y")),
    month = factor(format(date, "%b"), levels = month.abb),
    day   = as.integer(format(date, "%d"))
  ) %>%
  # 2. Keep only 2023
  filter(year == 2023) %>%
  # 3. Plot without needing a facet (single year)
  ggplot(aes(x = day, y = month, fill = new_cases)) +
    geom_tile(color = "white") +
    scale_fill_viridis_c(
      trans    = "sqrt",
      na.value = "grey90",
      name     = "New Cases"
    ) +
    labs(
      title = "Calendar Heatmap: Daily New Cases in Singapore (2023)",
      x     = "Day of Month",
      y     = NULL
    ) +
    theme_minimal() +
    theme(
      axis.text.y   = element_text(size = 8),
      panel.grid    = element_blank()
    )


```

### 2024 Daily New Cases

```{r}
#| code-fold: true

sg_ts %>%
  # 1. Extract year/month/day
  mutate(
    year  = as.integer(format(date, "%Y")),
    month = factor(format(date, "%b"), levels = month.abb),
    day   = as.integer(format(date, "%d"))
  ) %>%
  # 2. Keep only 2024
  filter(year == 2024) %>%
  # 3. Plot without needing a facet (single year)
  ggplot(aes(x = day, y = month, fill = new_cases)) +
    geom_tile(color = "white") +
    scale_fill_viridis_c(
      trans    = "sqrt",
      na.value = "grey90",
      name     = "New Cases"
    ) +
    labs(
      title = "Calendar Heatmap: Daily New Cases in Singapore (2024)",
      x     = "Day of Month",
      y     = NULL
    ) +
    theme_minimal() +
    theme(
      axis.text.y   = element_text(size = 8),
      panel.grid    = element_blank()
    )
```
:::

## Tryout 2 on: Life Expectancy Dataset from Kaggle

### **Step 1: Data Import (Life Expectancy cases)**

```{r}

le <- read_csv("DataEx06/Life Expectancy.csv")

```

### **Step 2a:** Peek at the first few rows

```{r}

head(le)
```

### **Step 2b:** List all column names

```{r}

colnames(le)
```

### **Step 3a:** Plot the Slope plot for all countries comparing between 2000 and 2020

Quick plot of all Countries Slope Plot comparing life expectancy between 2000 and 2020.

```{r}
#| code-fold: true

le_sel <- le %>%
  filter(Year %in% c(2000, 2020)) %>%
  select(
    Country    = Entity,                           # <— rename on‐the‐fly
    Year,
    life_exp   = `Period life expectancy at birth - Sex: total - Age: 0`  # <— rename on‐the‐fly
  )

ggplot(le_sel, aes(x = factor(Year), y = life_exp, group = Country, color = Country)) +
  geom_line(show.legend = FALSE) +
  geom_point(size = 2, show.legend = FALSE) +
  labs(
    title = "Slope Graph: Life Expectancy at Birth (2000 vs 2020)",
    x     = NULL,
    y     = "Life Expectancy (years)"
  ) +
  theme_minimal()
```

### **Step 3b:** Narrow down to ASEAN countries by Filtering

Next, we just want to filter the 10 ASEAN Countries and compare their life expectancy changes over the 20 years from 2000 to 2020.

```{r}

# Define the 10 ASEAN countries
asean_countries <- c(
  "Brunei", "Cambodia", "Indonesia", "Laos",
  "Malaysia", "Myanmar", "Philippines",
  "Singapore", "Thailand", "Vietnam"
)

# Filter for ASEAN + years 2000 & 2020, and select/rename columns
asean_slope <- le %>%
  filter(
    Year %in% c(2000, 2020),
    Entity %in% asean_countries
  ) %>%
  mutate(
    Country  = Entity,
    LifeExp  = `Period life expectancy at birth - Sex: total - Age: 0`,
    Year = factor(Year)
  ) %>%
  select(Country, Year, LifeExp)



```

### **Step 3c: Slopegraph** Plot for ASEAN countries

```{r}
#| code-fold: true

newggslopegraph(
  asean_slope,
  Time        = Year,
  Measurement = LifeExp,
  Grouping    = Country,
  Title       = "ASEAN Life Expectancy at Birth (2000 vs 2020)",
  SubTitle    = "Comparing across 10 Member States",
  Caption     = "Data source: Kaggle Global Life Expectancy"
)
```
