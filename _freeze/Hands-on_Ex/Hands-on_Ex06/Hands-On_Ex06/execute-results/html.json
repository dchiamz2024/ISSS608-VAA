{
  "hash": "98c6211286a9562fe01e7f98436ac7c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 6\"\ndescription: \"\"\nauthor: \"David Chiam\"\ndate: \"20 May 2025\"\ndate-modified: \"21 May 2025\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n# **07 - Visualising and Analysing Time-oriented Data**\n\n## **10.1 Hands-on Exercise Outcome**\n\nBy the end of this hands-on exercise we would have tried creating the followings data visualisation by using R packages:\n\n-   plotting a calender heatmap by using ggplot2 functions,\n-   plotting a cycle plot by using ggplot2 function,\n-   plotting a slopegraph\n-   plotting a horizon chart\n\n## **10.2 Getting Started Installing and launching R packages**\n\nIn this hands-on exercise, we will install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, \n               lubridate, ggthemes, \n               gridExtra, readxl, \n               knitr, data.table, \n               tidyverse,\n               CGPfunctions, ggHoriPlot)\n```\n:::\n\n\n## **10.3 Plotting Calendar Heatmap**\n\nIn this section, we will beplotting a calender heatmaps, like the one below, programmatically by using ggplot2 package.\n\n![](/Images/Hands-on_Ex6_Image01.png){fig-align=\"center\"}\n\nBy end of this section, we will be able to:\n\n-   plot a calender heatmap by using ggplot2 functions and extension,\n-   to write function using R programming,\n-   to derive specific date and time related field by using base R and lubridate packages\n-   to perform data preparation task by using tidyr and dplyr packages.\n\n### **10.3.1 The Data**\n\nFor the purpose of this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n### **10.3.2 Importing the data**\n\nThe code chunk below to was used to import *eventlog.csv* file into R environment and called the data frame as *attacks*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"DataEx06/eventlog.csv\")\n```\n:::\n\n\n### **10.3.3 Examining the data structure**\n\nAs a good practice, we aim to examine the imported data frame before further analysis is performed.\n\nFor example, *kable()* can be used to review the structure of the imported data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n-   *tz* field stores time zone of the source IP address.\n\n### **10.3.4 Data Preparation**\n\nStep 1: Deriving *weekday* and *hour of day* fields\n\nBefore we can plot the calender heatmap, two new fields namely *wkday* and *hour* need to be derived. In this step, we will write a function to perform the task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n::: callout-note\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n\nStep 2: Deriving the attacks tibble data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n::: callout-note\nBeside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting\n:::\n\nTable below shows the tidy tibble table after processing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n### **10.3.5 Building the Calendar Heatmaps**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\n## Things to learn from the code chunk\n\n-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.\n-   a new field called *n* is derived by using `group_by()` and `count()` functions.\n-   `na.omit()` is used to exclude missing value.\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n:::\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n### **10.3.6 Building Multiple Calendar Heatmaps**\n\n**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## The Code Chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_countries <- attacks %>%\n  count(source_country, name = \"total_attacks\", sort = TRUE) %>%\n  slice_max(total_attacks, n = 4) %>%\n  pull(source_country)\n\ngrouped_top4 <- attacks %>%\n  filter(source_country %in% top_countries) %>%\n  count(source_country, wkday, hour, name = \"n\") %>%\n  ungroup() %>%\n  na.omit()\n\nggplot(grouped_top4,\n       aes(x = hour, y = wkday, fill = n)) +\n  geom_tile(color = \"white\", size = 0.1) +\n  facet_wrap(~ source_country, ncol = 2) +             # 2 columns × 2 rows\n  coord_equal() +\n  theme_tufte(base_family = \"Helvetica\") +\n  scale_fill_gradient(\n    name = \"# of attacks\",\n    low  = \"sky blue\",\n    high = \"dark blue\"\n  ) +\n  labs(\n    x     = NULL,\n    y     = NULL,\n    title = \"Attacks by Weekday & time of the day\"\n  ) +\n  theme(\n    axis.ticks       = element_blank(),\n    plot.title       = element_text(hjust = 0.5),\n    strip.text       = element_text(face = \"bold\"),\n    legend.title     = element_text(size = 8),\n    legend.text      = element_text(size = 6)\n  )\n```\n:::\n\n:::\n\n### **10.3.7 Plotting Multiple Calendar Heatmaps**\n\nStep 1: Deriving attack by country object\n\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\n-   count the number of attacks by country,\n-   calculate the percent of attackes by country, and\n-   save the results in a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\nStep 2: Preparing the tidy data frame\n\nIn this step, you are required to extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n### **10.3.8 Plotting Multiple Calendar Heatmaps**\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## **10.4 Plotting Cycle Plot**\n\nIn this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions. A sample cycle plot is as below.\n\n![](/Images/Hands-on_Ex6_Image02.png){fig-align=\"center\"}\n\n### **10.4.1 Step 1: Data Import**\n\nFor the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.\n\nThe code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"DataEx06/arrivals_by_air.xlsx\")\n```\n:::\n\n\n### **10.4.2 Step 2: Deriving month and year fields**\n\nNext, two new fields called *month* and *year* are derived from *Month-Year* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n### **10.4.3 Step 3: Extracting the target country**\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n### **10.4.4 Step 4: Computing year average arrivals by month**\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n### **10.4.5 Srep 5: Plotting the cycle plot**\n\nThe code chunk below is used to plot the cycle plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## **10.5 Plotting Slopegraph**\n\nIn this section you will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about `newggslopegraph()` and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n\n### **10.5.1 Step 1: Data Import**\n\nImport the rice data set into R environment and examine the headers by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"DataEx06/rice.csv\")\n\nkable(head(rice))\n```\n\n::: {.cell-output-display}\n\n\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n\n\n:::\n:::\n\n\n### **10.5.2 Step 2: Plotting the slopegraph**\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"adapted & replotted by: David Chiam\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\n## Thing to learn from the code chunk above\n\nFor effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.\n:::\n\n## **10.6 Self Hands-on Practice on the codes in this section**\n\n![](/Images/Hands-on-Practice.png){width=\"558\"}\n\n## Tryout 1 on: Covid-19 Dataset from ourworldindata\n\n### **Step 1: Data Import (Covid-19 cases)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tsibble)\nlibrary(feasts)\n\n# Pull in the full OWID COVID dataset\nowid <- readr::read_csv(\n  \"https://covid.ourworldindata.org/data/owid-covid-data.csv\",\n  col_types = cols(\n    iso_code = col_character(),\n    location = col_character(),\n    date     = col_date(format = \"\"),\n    new_cases = col_double(),\n    new_deaths = col_double(),\n    # you can add more columns here as needed\n  )\n)\n```\n:::\n\n\n### **Step 2: Taking a Glimpse and Understanding the Dataset**\n\nLook through the dataset that has been loaded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Column names\nprint(colnames(owid))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"iso_code\"                                  \n [2] \"continent\"                                 \n [3] \"location\"                                  \n [4] \"date\"                                      \n [5] \"total_cases\"                               \n [6] \"new_cases\"                                 \n [7] \"new_cases_smoothed\"                        \n [8] \"total_deaths\"                              \n [9] \"new_deaths\"                                \n[10] \"new_deaths_smoothed\"                       \n[11] \"total_cases_per_million\"                   \n[12] \"new_cases_per_million\"                     \n[13] \"new_cases_smoothed_per_million\"            \n[14] \"total_deaths_per_million\"                  \n[15] \"new_deaths_per_million\"                    \n[16] \"new_deaths_smoothed_per_million\"           \n[17] \"reproduction_rate\"                         \n[18] \"icu_patients\"                              \n[19] \"icu_patients_per_million\"                  \n[20] \"hosp_patients\"                             \n[21] \"hosp_patients_per_million\"                 \n[22] \"weekly_icu_admissions\"                     \n[23] \"weekly_icu_admissions_per_million\"         \n[24] \"weekly_hosp_admissions\"                    \n[25] \"weekly_hosp_admissions_per_million\"        \n[26] \"total_tests\"                               \n[27] \"new_tests\"                                 \n[28] \"total_tests_per_thousand\"                  \n[29] \"new_tests_per_thousand\"                    \n[30] \"new_tests_smoothed\"                        \n[31] \"new_tests_smoothed_per_thousand\"           \n[32] \"positive_rate\"                             \n[33] \"tests_per_case\"                            \n[34] \"tests_units\"                               \n[35] \"total_vaccinations\"                        \n[36] \"people_vaccinated\"                         \n[37] \"people_fully_vaccinated\"                   \n[38] \"total_boosters\"                            \n[39] \"new_vaccinations\"                          \n[40] \"new_vaccinations_smoothed\"                 \n[41] \"total_vaccinations_per_hundred\"            \n[42] \"people_vaccinated_per_hundred\"             \n[43] \"people_fully_vaccinated_per_hundred\"       \n[44] \"total_boosters_per_hundred\"                \n[45] \"new_vaccinations_smoothed_per_million\"     \n[46] \"new_people_vaccinated_smoothed\"            \n[47] \"new_people_vaccinated_smoothed_per_hundred\"\n[48] \"stringency_index\"                          \n[49] \"population_density\"                        \n[50] \"median_age\"                                \n[51] \"aged_65_older\"                             \n[52] \"aged_70_older\"                             \n[53] \"gdp_per_capita\"                            \n[54] \"extreme_poverty\"                           \n[55] \"cardiovasc_death_rate\"                     \n[56] \"diabetes_prevalence\"                       \n[57] \"female_smokers\"                            \n[58] \"male_smokers\"                              \n[59] \"handwashing_facilities\"                    \n[60] \"hospital_beds_per_thousand\"                \n[61] \"life_expectancy\"                           \n[62] \"human_development_index\"                   \n[63] \"population\"                                \n[64] \"excess_mortality_cumulative_absolute\"      \n[65] \"excess_mortality_cumulative\"               \n[66] \"excess_mortality\"                          \n[67] \"excess_mortality_cumulative_per_million\"   \n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Glimpse structure\nglimpse(owid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 429,435\nColumns: 67\n$ iso_code                                   <chr> \"AFG\", \"AFG\", \"AFG\", \"AFG\",…\n$ continent                                  <chr> \"Asia\", \"Asia\", \"Asia\", \"As…\n$ location                                   <chr> \"Afghanistan\", \"Afghanistan…\n$ date                                       <date> 2020-01-05, 2020-01-06, 20…\n$ total_cases                                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_cases                                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_cases_smoothed                         <dbl> NA, NA, NA, NA, NA, 0, 0, 0…\n$ total_deaths                               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_deaths                                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_deaths_smoothed                        <dbl> NA, NA, NA, NA, NA, 0, 0, 0…\n$ total_cases_per_million                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_cases_per_million                      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_cases_smoothed_per_million             <dbl> NA, NA, NA, NA, NA, 0, 0, 0…\n$ total_deaths_per_million                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_deaths_per_million                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ new_deaths_smoothed_per_million            <dbl> NA, NA, NA, NA, NA, 0, 0, 0…\n$ reproduction_rate                          <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ icu_patients                               <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ icu_patients_per_million                   <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ hosp_patients                              <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ hosp_patients_per_million                  <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ weekly_icu_admissions                      <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ weekly_icu_admissions_per_million          <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ weekly_hosp_admissions                     <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ weekly_hosp_admissions_per_million         <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ total_tests                                <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_tests                                  <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ total_tests_per_thousand                   <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_tests_per_thousand                     <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_tests_smoothed                         <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_tests_smoothed_per_thousand            <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ positive_rate                              <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ tests_per_case                             <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ tests_units                                <chr> NA, NA, NA, NA, NA, NA, NA,…\n$ total_vaccinations                         <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ people_vaccinated                          <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ people_fully_vaccinated                    <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ total_boosters                             <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_vaccinations                           <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_vaccinations_smoothed                  <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ total_vaccinations_per_hundred             <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ people_vaccinated_per_hundred              <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ people_fully_vaccinated_per_hundred        <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ total_boosters_per_hundred                 <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_vaccinations_smoothed_per_million      <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_people_vaccinated_smoothed             <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ new_people_vaccinated_smoothed_per_hundred <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ stringency_index                           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ population_density                         <dbl> 54.422, 54.422, 54.422, 54.…\n$ median_age                                 <dbl> 18.6, 18.6, 18.6, 18.6, 18.…\n$ aged_65_older                              <dbl> 2.581, 2.581, 2.581, 2.581,…\n$ aged_70_older                              <dbl> 1.337, 1.337, 1.337, 1.337,…\n$ gdp_per_capita                             <dbl> 1803.987, 1803.987, 1803.98…\n$ extreme_poverty                            <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ cardiovasc_death_rate                      <dbl> 597.029, 597.029, 597.029, …\n$ diabetes_prevalence                        <dbl> 9.59, 9.59, 9.59, 9.59, 9.5…\n$ female_smokers                             <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ male_smokers                               <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ handwashing_facilities                     <dbl> 37.746, 37.746, 37.746, 37.…\n$ hospital_beds_per_thousand                 <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.…\n$ life_expectancy                            <dbl> 64.83, 64.83, 64.83, 64.83,…\n$ human_development_index                    <dbl> 0.511, 0.511, 0.511, 0.511,…\n$ population                                 <dbl> 41128772, 41128772, 4112877…\n$ excess_mortality_cumulative_absolute       <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ excess_mortality_cumulative                <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ excess_mortality                           <dbl> NA, NA, NA, NA, NA, NA, NA,…\n$ excess_mortality_cumulative_per_million    <dbl> NA, NA, NA, NA, NA, NA, NA,…\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. First 6 rows\nknitr::kable(head(owid), caption = \"First six rows of the OWID COVID dataset\")\n```\n\n::: {.cell-output-display}\n\n\nTable: First six rows of the OWID COVID dataset\n\n|iso_code |continent |location    |date       | total_cases| new_cases| new_cases_smoothed| total_deaths| new_deaths| new_deaths_smoothed| total_cases_per_million| new_cases_per_million| new_cases_smoothed_per_million| total_deaths_per_million| new_deaths_per_million| new_deaths_smoothed_per_million| reproduction_rate| icu_patients| icu_patients_per_million| hosp_patients| hosp_patients_per_million| weekly_icu_admissions| weekly_icu_admissions_per_million| weekly_hosp_admissions| weekly_hosp_admissions_per_million| total_tests| new_tests| total_tests_per_thousand| new_tests_per_thousand| new_tests_smoothed| new_tests_smoothed_per_thousand| positive_rate| tests_per_case|tests_units | total_vaccinations| people_vaccinated| people_fully_vaccinated| total_boosters| new_vaccinations| new_vaccinations_smoothed| total_vaccinations_per_hundred| people_vaccinated_per_hundred| people_fully_vaccinated_per_hundred| total_boosters_per_hundred| new_vaccinations_smoothed_per_million| new_people_vaccinated_smoothed| new_people_vaccinated_smoothed_per_hundred| stringency_index| population_density| median_age| aged_65_older| aged_70_older| gdp_per_capita| extreme_poverty| cardiovasc_death_rate| diabetes_prevalence| female_smokers| male_smokers| handwashing_facilities| hospital_beds_per_thousand| life_expectancy| human_development_index| population| excess_mortality_cumulative_absolute| excess_mortality_cumulative| excess_mortality| excess_mortality_cumulative_per_million|\n|:--------|:---------|:-----------|:----------|-----------:|---------:|------------------:|------------:|----------:|-------------------:|-----------------------:|---------------------:|------------------------------:|------------------------:|----------------------:|-------------------------------:|-----------------:|------------:|------------------------:|-------------:|-------------------------:|---------------------:|---------------------------------:|----------------------:|----------------------------------:|-----------:|---------:|------------------------:|----------------------:|------------------:|-------------------------------:|-------------:|--------------:|:-----------|------------------:|-----------------:|-----------------------:|--------------:|----------------:|-------------------------:|------------------------------:|-----------------------------:|-----------------------------------:|--------------------------:|-------------------------------------:|------------------------------:|------------------------------------------:|----------------:|------------------:|----------:|-------------:|-------------:|--------------:|---------------:|---------------------:|-------------------:|--------------:|------------:|----------------------:|--------------------------:|---------------:|-----------------------:|----------:|------------------------------------:|---------------------------:|----------------:|---------------------------------------:|\n|AFG      |Asia      |Afghanistan |2020-01-05 |           0|         0|                 NA|            0|          0|                  NA|                       0|                     0|                             NA|                        0|                      0|                              NA|                NA|           NA|                       NA|            NA|                        NA|                    NA|                                NA|                     NA|                                 NA|          NA|        NA|                       NA|                     NA|                 NA|                              NA|            NA|             NA|NA          |                 NA|                NA|                      NA|             NA|               NA|                        NA|                             NA|                            NA|                                  NA|                         NA|                                    NA|                             NA|                                         NA|                0|             54.422|       18.6|         2.581|         1.337|       1803.987|              NA|               597.029|                9.59|             NA|           NA|                 37.746|                        0.5|           64.83|                   0.511|   41128772|                                   NA|                          NA|               NA|                                      NA|\n|AFG      |Asia      |Afghanistan |2020-01-06 |           0|         0|                 NA|            0|          0|                  NA|                       0|                     0|                             NA|                        0|                      0|                              NA|                NA|           NA|                       NA|            NA|                        NA|                    NA|                                NA|                     NA|                                 NA|          NA|        NA|                       NA|                     NA|                 NA|                              NA|            NA|             NA|NA          |                 NA|                NA|                      NA|             NA|               NA|                        NA|                             NA|                            NA|                                  NA|                         NA|                                    NA|                             NA|                                         NA|                0|             54.422|       18.6|         2.581|         1.337|       1803.987|              NA|               597.029|                9.59|             NA|           NA|                 37.746|                        0.5|           64.83|                   0.511|   41128772|                                   NA|                          NA|               NA|                                      NA|\n|AFG      |Asia      |Afghanistan |2020-01-07 |           0|         0|                 NA|            0|          0|                  NA|                       0|                     0|                             NA|                        0|                      0|                              NA|                NA|           NA|                       NA|            NA|                        NA|                    NA|                                NA|                     NA|                                 NA|          NA|        NA|                       NA|                     NA|                 NA|                              NA|            NA|             NA|NA          |                 NA|                NA|                      NA|             NA|               NA|                        NA|                             NA|                            NA|                                  NA|                         NA|                                    NA|                             NA|                                         NA|                0|             54.422|       18.6|         2.581|         1.337|       1803.987|              NA|               597.029|                9.59|             NA|           NA|                 37.746|                        0.5|           64.83|                   0.511|   41128772|                                   NA|                          NA|               NA|                                      NA|\n|AFG      |Asia      |Afghanistan |2020-01-08 |           0|         0|                 NA|            0|          0|                  NA|                       0|                     0|                             NA|                        0|                      0|                              NA|                NA|           NA|                       NA|            NA|                        NA|                    NA|                                NA|                     NA|                                 NA|          NA|        NA|                       NA|                     NA|                 NA|                              NA|            NA|             NA|NA          |                 NA|                NA|                      NA|             NA|               NA|                        NA|                             NA|                            NA|                                  NA|                         NA|                                    NA|                             NA|                                         NA|                0|             54.422|       18.6|         2.581|         1.337|       1803.987|              NA|               597.029|                9.59|             NA|           NA|                 37.746|                        0.5|           64.83|                   0.511|   41128772|                                   NA|                          NA|               NA|                                      NA|\n|AFG      |Asia      |Afghanistan |2020-01-09 |           0|         0|                 NA|            0|          0|                  NA|                       0|                     0|                             NA|                        0|                      0|                              NA|                NA|           NA|                       NA|            NA|                        NA|                    NA|                                NA|                     NA|                                 NA|          NA|        NA|                       NA|                     NA|                 NA|                              NA|            NA|             NA|NA          |                 NA|                NA|                      NA|             NA|               NA|                        NA|                             NA|                            NA|                                  NA|                         NA|                                    NA|                             NA|                                         NA|                0|             54.422|       18.6|         2.581|         1.337|       1803.987|              NA|               597.029|                9.59|             NA|           NA|                 37.746|                        0.5|           64.83|                   0.511|   41128772|                                   NA|                          NA|               NA|                                      NA|\n|AFG      |Asia      |Afghanistan |2020-01-10 |           0|         0|                  0|            0|          0|                   0|                       0|                     0|                              0|                        0|                      0|                               0|                NA|           NA|                       NA|            NA|                        NA|                    NA|                                NA|                     NA|                                 NA|          NA|        NA|                       NA|                     NA|                 NA|                              NA|            NA|             NA|NA          |                 NA|                NA|                      NA|             NA|               NA|                        NA|                             NA|                            NA|                                  NA|                         NA|                                    NA|                             NA|                                         NA|                0|             54.422|       18.6|         2.581|         1.337|       1803.987|              NA|               597.029|                9.59|             NA|           NA|                 37.746|                        0.5|           64.83|                   0.511|   41128772|                                   NA|                          NA|               NA|                                      NA|\n\n\n:::\n\n```{.r .cell-code}\n# 4. Quick summary of key numeric fields\nsummary(select(owid, new_cases, new_deaths, total_cases, total_deaths, people_vaccinated))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   new_cases          new_deaths         total_cases         total_deaths    \n Min.   :       0   Min.   :     0.00   Min.   :        0   Min.   :      0  \n 1st Qu.:       0   1st Qu.:     0.00   1st Qu.:     6281   1st Qu.:     43  \n Median :       0   Median :     0.00   Median :    63653   Median :    799  \n Mean   :    8017   Mean   :    71.85   Mean   :  7365292   Mean   :  81260  \n 3rd Qu.:       0   3rd Qu.:     0.00   3rd Qu.:   758272   3rd Qu.:   9574  \n Max.   :44236227   Max.   :103719.00   Max.   :775866783   Max.   :7057132  \n NA's   :19276      NA's   :18827       NA's   :17631       NA's   :17631    \n people_vaccinated  \n Min.   :0.000e+00  \n 1st Qu.:1.050e+06  \n Median :6.901e+06  \n Mean   :2.487e+08  \n 3rd Qu.:5.093e+07  \n Max.   :5.631e+09  \n NA's   :348303     \n```\n\n\n:::\n:::\n\n\nI will only be extracting the Data for Singapore in this tryout.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg <- owid %>%\n  filter(location == \"Singapore\") %>%\n  select(date, new_cases, new_deaths)\n\n# Convert to a tsibble\nsg_ts <- sg %>%\n  as_tsibble(index = date)\n```\n:::\n\n\nFirst we would like to see the number of Daily new Covid-19 cases and Deaths over the period of 2020 to 2024.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsg_long <- sg %>% pivot_longer(-date, names_to=\"metric\", values_to=\"count\")\n\nggplot(sg_long, aes(date, count, color=metric)) +\n  geom_line() +\n  labs(\n    title = \"Daily New COVID-19 Cases vs Deaths (Singapore)\",\n    x = \"Date\", y = \"Count\",\n    color = \"\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### **Step 3: Plotting the Heatmaps by Daily New Cases**\n\nI would imagine the plots to show how many daily cases per day. Given that that are alot of data points, I envisage the plot to be sectorised by months of the year and the individual dates in the month.\n\nThe below code chunks will plot the Calendar Heatmap (Day × Month) of daily new cases for each year.\n\n::: panel-tabset\n### 2020 Daily New Cases\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsg_ts %>%\n  # 1. Extract year/month/day\n  mutate(\n    year  = as.integer(format(date, \"%Y\")),\n    month = factor(format(date, \"%b\"), levels = month.abb),\n    day   = as.integer(format(date, \"%d\"))\n  ) %>%\n  # 2. Keep only 2020\n  filter(year == 2020) %>%\n  # 3. Plot without needing a facet (single year)\n  ggplot(aes(x = day, y = month, fill = new_cases)) +\n    geom_tile(color = \"white\") +\n    scale_fill_viridis_c(\n      trans    = \"sqrt\",\n      na.value = \"grey90\",\n      name     = \"New Cases\"\n    ) +\n    labs(\n      title = \"Calendar Heatmap: Daily New Cases in Singapore (2020)\",\n      x     = \"Day of Month\",\n      y     = NULL\n    ) +\n    theme_minimal() +\n    theme(\n      axis.text.y   = element_text(size = 8),\n      panel.grid    = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### 2021 Daily New Cases\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsg_ts %>%\n  # 1. Extract year/month/day\n  mutate(\n    year  = as.integer(format(date, \"%Y\")),\n    month = factor(format(date, \"%b\"), levels = month.abb),\n    day   = as.integer(format(date, \"%d\"))\n  ) %>%\n  # 2. Keep only 2021\n  filter(year == 2021) %>%\n  # 3. Plot without needing a facet (single year)\n  ggplot(aes(x = day, y = month, fill = new_cases)) +\n    geom_tile(color = \"white\") +\n    scale_fill_viridis_c(\n      trans    = \"sqrt\",\n      na.value = \"grey90\",\n      name     = \"New Cases\"\n    ) +\n    labs(\n      title = \"Calendar Heatmap: Daily New Cases in Singapore (2021)\",\n      x     = \"Day of Month\",\n      y     = NULL\n    ) +\n    theme_minimal() +\n    theme(\n      axis.text.y   = element_text(size = 8),\n      panel.grid    = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### 2022 Daily New Cases\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsg_ts %>%\n  # 1. Extract year/month/day\n  mutate(\n    year  = as.integer(format(date, \"%Y\")),\n    month = factor(format(date, \"%b\"), levels = month.abb),\n    day   = as.integer(format(date, \"%d\"))\n  ) %>%\n  # 2. Keep only 2022\n  filter(year == 2022) %>%\n  # 3. Plot without needing a facet (single year)\n  ggplot(aes(x = day, y = month, fill = new_cases)) +\n    geom_tile(color = \"white\") +\n    scale_fill_viridis_c(\n      trans    = \"sqrt\",\n      na.value = \"grey90\",\n      name     = \"New Cases\"\n    ) +\n    labs(\n      title = \"Calendar Heatmap: Daily New Cases in Singapore (2022)\",\n      x     = \"Day of Month\",\n      y     = NULL\n    ) +\n    theme_minimal() +\n    theme(\n      axis.text.y   = element_text(size = 8),\n      panel.grid    = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### 2023 Daily New Cases\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsg_ts %>%\n  # 1. Extract year/month/day\n  mutate(\n    year  = as.integer(format(date, \"%Y\")),\n    month = factor(format(date, \"%b\"), levels = month.abb),\n    day   = as.integer(format(date, \"%d\"))\n  ) %>%\n  # 2. Keep only 2023\n  filter(year == 2023) %>%\n  # 3. Plot without needing a facet (single year)\n  ggplot(aes(x = day, y = month, fill = new_cases)) +\n    geom_tile(color = \"white\") +\n    scale_fill_viridis_c(\n      trans    = \"sqrt\",\n      na.value = \"grey90\",\n      name     = \"New Cases\"\n    ) +\n    labs(\n      title = \"Calendar Heatmap: Daily New Cases in Singapore (2023)\",\n      x     = \"Day of Month\",\n      y     = NULL\n    ) +\n    theme_minimal() +\n    theme(\n      axis.text.y   = element_text(size = 8),\n      panel.grid    = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### 2024 Daily New Cases\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsg_ts %>%\n  # 1. Extract year/month/day\n  mutate(\n    year  = as.integer(format(date, \"%Y\")),\n    month = factor(format(date, \"%b\"), levels = month.abb),\n    day   = as.integer(format(date, \"%d\"))\n  ) %>%\n  # 2. Keep only 2024\n  filter(year == 2024) %>%\n  # 3. Plot without needing a facet (single year)\n  ggplot(aes(x = day, y = month, fill = new_cases)) +\n    geom_tile(color = \"white\") +\n    scale_fill_viridis_c(\n      trans    = \"sqrt\",\n      na.value = \"grey90\",\n      name     = \"New Cases\"\n    ) +\n    labs(\n      title = \"Calendar Heatmap: Daily New Cases in Singapore (2024)\",\n      x     = \"Day of Month\",\n      y     = NULL\n    ) +\n    theme_minimal() +\n    theme(\n      axis.text.y   = element_text(size = 8),\n      panel.grid    = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n:::\n\n## Tryout 2 on: Life Expectancy Dataset from Kaggle\n\n### **Step 1: Data Import (Life Expectancy cases)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nle <- read_csv(\"DataEx06/Life Expectancy.csv\")\n```\n:::\n\n\n### **Step 2a:** Peek at the first few rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(le)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Entity      Code   Year Period life expectancy at birth - Sex: total - Age: …¹\n  <chr>       <chr> <dbl>                                                  <dbl>\n1 Afghanistan AFG    1950                                                   28.2\n2 Afghanistan AFG    1951                                                   28.6\n3 Afghanistan AFG    1952                                                   29.0\n4 Afghanistan AFG    1953                                                   29.5\n5 Afghanistan AFG    1954                                                   29.7\n6 Afghanistan AFG    1955                                                   30.4\n# ℹ abbreviated name: ¹​`Period life expectancy at birth - Sex: total - Age: 0`\n```\n\n\n:::\n:::\n\n\n### **Step 2b:** List all column names\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(le)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Entity\"                                               \n[2] \"Code\"                                                 \n[3] \"Year\"                                                 \n[4] \"Period life expectancy at birth - Sex: total - Age: 0\"\n```\n\n\n:::\n:::\n\n\n### **Step 3a:** Plot the Slope plot for all countries comparing between 2000 and 2020\n\nQuick plot of all Countries Slope Plot comparing life expectancy between 2000 and 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nle_sel <- le %>%\n  filter(Year %in% c(2000, 2020)) %>%\n  select(\n    Country    = Entity,                           # <— rename on‐the‐fly\n    Year,\n    life_exp   = `Period life expectancy at birth - Sex: total - Age: 0`  # <— rename on‐the‐fly\n  )\n\nggplot(le_sel, aes(x = factor(Year), y = life_exp, group = Country, color = Country)) +\n  geom_line(show.legend = FALSE) +\n  geom_point(size = 2, show.legend = FALSE) +\n  labs(\n    title = \"Slope Graph: Life Expectancy at Birth (2000 vs 2020)\",\n    x     = NULL,\n    y     = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n### **Step 3b:** Narrow down to ASEAN countries by Filtering\n\nNext, we just want to filter the 10 ASEAN Countries and compare their life expectancy changes over the 20 years from 2000 to 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the 10 ASEAN countries\nasean_countries <- c(\n  \"Brunei\", \"Cambodia\", \"Indonesia\", \"Laos\",\n  \"Malaysia\", \"Myanmar\", \"Philippines\",\n  \"Singapore\", \"Thailand\", \"Vietnam\"\n)\n\n# Filter for ASEAN + years 2000 & 2020, and select/rename columns\nasean_slope <- le %>%\n  filter(\n    Year %in% c(2000, 2020),\n    Entity %in% asean_countries\n  ) %>%\n  mutate(\n    Country  = Entity,\n    LifeExp  = `Period life expectancy at birth - Sex: total - Age: 0`,\n    Year = factor(Year)\n  ) %>%\n  select(Country, Year, LifeExp)\n```\n:::\n\n\n### **Step 3c: Slopegraph** Plot for ASEAN countries\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nnewggslopegraph(\n  asean_slope,\n  Time        = Year,\n  Measurement = LifeExp,\n  Grouping    = Country,\n  Title       = \"ASEAN Life Expectancy at Birth (2000 vs 2020)\",\n  SubTitle    = \"Comparing across 10 Member States\",\n  Caption     = \"Data source: Kaggle Global Life Expectancy\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex06_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "Hands-On_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}