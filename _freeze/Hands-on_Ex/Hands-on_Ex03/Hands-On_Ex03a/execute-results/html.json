{
  "hash": "1035fa452fd5420417cdeca21ddf5dc5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 3A\"\ndescription: \"\"\nauthor: \"David Chiam\"\ndate: \"30 April 2025\"\ndate-modified: \"30 April 2025\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n# **3A - Programming Interactive Data Visualisation with R**\n\n## **3.1 Learning Outcome**\n\nIn this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.\n\n## **3.2 Getting Started**\n\nFirst, write a code chunk to check, install and launch the following R packages:\n\n-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making ‘ggplot’ graphics interactive.\n-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.\n-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.\n-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n```\n:::\n\n\n## **3.3 Importing Data**\n\nIn this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.\n\nThe code chunk below `read_csv()` of **readr** package is used to import *Exam_data.csv* data file into R and save it as an tibble data frame called `exam_data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"chap03/data/Exam_data.csv\")\n```\n:::\n\n\n## **3.4 Interactive Data Visualisation - ggiraph methods**\n\n[ggiraph](https://davidgohel.github.io/ggiraph/index.html) is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\n\nInteractive is made with [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) that can understand three arguments:\n\n-   `Tooltip`: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\n-   `Onclick`: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\n-   `Data_id`: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://www.ardata.fr/ggiraph-book/selections.html) for more detail explanation.\n\n::: How-Does-it-Work\n![](/Images/teacher.png){width=\"42\"} <span style=\"font-size: 30px; vertical-align: middle;\"><strong>How does it work?</strong></span>\n\nIt extends **ggplot2** with:\n\n-   interactive geom functions: `geom_point_interactive()`, `geom_col_interactive()`, etc.\n-   interactive scale functions: `scale_color_continuous_interactive()`, `scale_fill_manual_interactive()`, etc.\n-   interactive facet functions: `facet_wrap_interactive()`, `facet_grid_interactive()` with `labeller_interactive()`.\n-   interactive guide functions: `guide_colorbar_interactive()`, `guide_legend_interactive()`.\n-   interactive theme elements: `element_line_interactive()`, `element_rect_interactive()`, `label_interactive()`.\n:::\n\n### **3.4.1 Tooltip effect with *tooltip* aesthetic**\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using **ggiraph** package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive svg object.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}