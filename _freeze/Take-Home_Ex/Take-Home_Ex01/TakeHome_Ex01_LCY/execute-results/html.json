{
  "hash": "8b3c02cd77446c321492a0f74594274f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1 (Part 2)\"\nauthor: \"Liu Chih Yuan & David Chiam\"\ndate: \"April 29, 2025\"\ndate-modified: \"11 May 2025\"\nformat: html\ncode-fold: true\ncode-tools: true\n\nexecute: \n  eval: true        # run code \n  echo: true         # show code \n  message: false\n  warning: false     #warning msg wont come out\n  freeze: true      #speed up rendering time\neditor: visual\n---\n\n\n\n::: callout-note\nThe original Netlify page was designed and produced by [LIU CHIH-YUAN](https://cabbage-wonderland.netlify.app/takehome_ex/takehome_ex01/takehome_ex01) for his Take-Home Assignment 1 and can be found in the link by clicking on his *name*. Below is an extract of the original page inclusive the codes and plots.\n\nI will be providing a critic on three good design principles and three areas for further improvement on his work. I will also prepare the makeover version of the data visualisation in Section 4 below.\n:::\n\n# Exploratory Analysis of Age and Gender Distribution Across Singapore Planning Areas (2024)\n\n## 1. Overview\n\nThe 2024 dataset from Singapore' Department of Statistics provides resident population data by planning area, subzone, age, and sex.\n\n### 1.1 Objective\n\nTo perform structured exploratory data analysis to uncover insights on demographic distribution across regions.\n\n## 2. Getting Started\n\n### 2.1 Load Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggrepel, ggthemes, patchwork, ggridges, scales)\n```\n:::\n\n\n\nThe R packages used in this EDA are as follows:\n\n1.  `tidyverse` core R package for data science (contains essential packages such as ggplot2)\n2.  `ggrepel` for ggplot2 to repel overlapping text labels\n3.  `ggthemes` extra ggplot themes\n4.  `patchwork` combine ggplot\n5.  `ggridges` for ridgeline plots\n6.  `scales` customer number formatting\n\n### 2.2 Import Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"Dataset/respopagesex2024.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncommon_theme <- theme_minimal(base_size = 16) +\n  theme(\n    axis.text = element_text(size = 18),\n    axis.title = element_text(size = 20),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    legend.text = element_text(size = 17),\n    legend.title = element_text(size = 16)\n  )\n```\n:::\n\n\n\n#### 2.2.1 Check Missing Values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,424\nColumns: 6\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  <chr> \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  <chr> \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  <int> 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time <int> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n```\n\n\n:::\n\n```{.r .cell-code}\ncolSums(is.na(df))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PA   SZ  Age  Sex  Pop Time \n   0    0    0    0    0    0 \n```\n\n\n:::\n:::\n\n\n\n### 2.3 Data Processing\n\n#### 2.3.1 Checking Column Types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t60424 obs. of  6 variables:\n $ PA  : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time: int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n```\n\n\n:::\n:::\n\n\n\nWe see column `Age` is \"chr\" (character) instead of numeric, let's check why by finding the unique value of column `Age`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(unique(df$Age))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"0\"           \"1\"           \"10\"          \"11\"          \"12\"         \n [6] \"13\"          \"14\"          \"15\"          \"16\"          \"17\"         \n[11] \"18\"          \"19\"          \"2\"           \"20\"          \"21\"         \n[16] \"22\"          \"23\"          \"24\"          \"25\"          \"26\"         \n[21] \"27\"          \"28\"          \"29\"          \"3\"           \"30\"         \n[26] \"31\"          \"32\"          \"33\"          \"34\"          \"35\"         \n[31] \"36\"          \"37\"          \"38\"          \"39\"          \"4\"          \n[36] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[41] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[46] \"5\"           \"50\"          \"51\"          \"52\"          \"53\"         \n[51] \"54\"          \"55\"          \"56\"          \"57\"          \"58\"         \n[56] \"59\"          \"6\"           \"60\"          \"61\"          \"62\"         \n[61] \"63\"          \"64\"          \"65\"          \"66\"          \"67\"         \n[66] \"68\"          \"69\"          \"7\"           \"70\"          \"71\"         \n[71] \"72\"          \"73\"          \"74\"          \"75\"          \"76\"         \n[76] \"77\"          \"78\"          \"79\"          \"8\"           \"80\"         \n[81] \"81\"          \"82\"          \"83\"          \"84\"          \"85\"         \n[86] \"86\"          \"87\"          \"88\"          \"89\"          \"9\"          \n[91] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n\n\nHere most likely it's the `90_and_over` causing it to be a `str` not `int`\n\n#### 2.3.2 Creating a Numeric Age Column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(\n    AgeNum = suppressWarnings(\n      ifelse(Age == \"90_and_Over\", 90, as.numeric(Age))\n    )\n  )\n```\n:::\n\n\n\nSince we observed people over 90 years old are categorized `90_and_above` instead of actual numbers, for the ease of plotting we hereby create a new column `AgeNum`\n\n#### 2.3.3 Creating Age Grouping\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(\n    AgeGroup = case_when(\n      AgeNum <= 12 ~ \"Child\",\n      AgeNum <= 24 ~ \"Youth\",\n      AgeNum <= 64 ~ \"Adult\",\n      TRUE ~ \"Senior\"\n    )\n  )\n```\n:::\n\n\n\nWe create a new column `AgeGroup` for future EDA purposes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t60424 obs. of  8 variables:\n $ PA      : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ      : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age     : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex     : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop     : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time    : int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n $ AgeNum  : num  0 0 1 1 2 2 3 3 4 4 ...\n $ AgeGroup: chr  \"Child\" \"Child\" \"Child\" \"Child\" ...\n```\n\n\n:::\n:::\n\n\n\n## 3. Exploratory Data Analysis\n\n### EDA 1: Population by Age / Age Group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(df, aes(x = AgeNum, y = Pop)) +\n  stat_summary(fun = sum, geom = \"bar\", fill = \"steelblue\") +\n  labs(title = \"Total Population by Age\", x = \"Age\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np2 <- df %>%\n  group_by(AgeGroup) %>%\n  summarise(Pop = sum(Pop)) %>%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Population by Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p1 / p2) + plot_layout(heights = c(1.2, 1))\n```\n\n::: {.cell-output-display}\n![](TakeHome_Ex01_LCY_files/figure-html/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n**Insights:**\n\n1.  Most residents fall between **ages 25 to 54**\n2.  **Youth population is shrinking**, suggesting long-term labor sustainability issues\n3.  **Senior population (65+) rising**, indicating growing need for eldercare and aging population\n\n------------------------------------------------------------------------\n\n::: callout-note\n### *Comments by David Chiam* on EDA 1: Population by Age / Age Group\n\n![](/Images/thumbs-up.png){width=\"32\"}[<strong> 3 Good Design Principles</strong>]{style=\"font-size:22px; color:#0077CC;\"}\n\n1.  **Good Data-Appropriate Chart Type (Total Population by Age & Population by Age Group)**\n\n    -   A Bar Chart was used to show the visualization of the population count for each discrete age. This is apprpriate for numerical variable like age or age bands. Readers can easily assess relative sizes, which support the effective visual comparison (i.e. comparing which age has a higher count).\n\n    -   The second plot on \"Population by Age Group\" has banded the ages into 4 Age Groups, namely: *Adult*, *Child*, *Senior* and *Youth*. This helps to condense the chart into age categories for quick selection if one intends to zoom in to a particularly age group for analysis.\n\n    -   [**Assessment**]{.underline}: I would give this a rather high score on the clarity scale.\n\n2.  **Clear Labelling and Minimal Chart Junk**\n\n    -   The Axis Labels were simple and understanbleable. For both plots, the Y-axis population intervals with the use of horizontal grid lines allow for clear relative reference and comparisons. Furthermore the grid line are in lighter tone of grey which does not distract the viewer.\n\n    -   With no excessive gridlines, background noise, or distracting embellishments, Chih Yuan was able to apply the principle of minimizing “non-data ink” to maintain visual clarity.\n\n    -   [**Assessment**]{.underline}: I would give this a good score on the clarity scale.\n\n3.  **Functional Simplicity**\n\n    -   The plot avoids excessive color schemes, 3D effects, or elaborate design, ensuring that the focus remains solely on the dataset itself. The use of colours also made the visual easier to identify age groupings which confusion, especially avoiding \"colour blind\" schemes.\n\n    -   It can be observed that Chih Yuan has likely prioritized clarity over unnecessary decoration is a strong point.\n\n![](/Images/negative-comment.png){width=\"32\"}[<strong> 3 Areas for Improvement </strong>]{style=\"font-size:22px; color:#0077CC;\"}\n\n1.  **More Data-meaningful Colour Encoding for Plot A**\n\n    -   Originally only one colour was used in Plot A, whch is \"steelblue\". And all ages were treated uniformly with no extra information encoded visually. However, in Plot B, the ages were broken down in to Age Groups and had respectively colours.\n\n    -   [**Improvements**]{.underline}: With each Age bar coloured by the Age Group (i.e. Chlid, Youth, Adult, Senior etc.) according to a meaningful colour palette, the read would be able to immediately perceive a generation structure (by colour) on Plot A. This is to adhere to the design principle where it leverages on the pre-attentive attributes to encode extra informationn for instant recognition.\n\n    -   How this is done: use a customized `scale_fill_manual()` based on Age Bands.\n\n2.  **Better X-Axis Scale (Breaks) and Age Handling**\n\n    -   The original plot was created with bar for AgeNum but the Age axis was cluttered with every single year shown with the defauly ggplot spacing. This might cause readers to have a cognitive overload trying to trace the exact age levels.\n\n    -   [**Improvements**]{.underline}: There is a need to have explicit control over the X-axis breaks using `breaks = seq(0, 110, by = 5)`, where the age labels are every 5 years intervals. this makes the chart easier to read and keeps the chart clean and orderly. The design principle was to reduce clutter and optimise scales for faster comprehension.\n\n3.  **Clearer Population by Age Group Plot (with Dual Labels)**\n\n    -   The original plot `p2` uses AgeGroup categories correctly but plots only height (population count) as an absolute value. This does not give the reader a sense of relative comparison between Age Groups.\n\n    -   [**Improvements**]{.underline}: In the Plot B, bar labels where included to show the population count inside the bar and the percentage value outside the bar. This gives the reader both the absolute and relative metrics for the visuals. The design principle is to make data-ink ratio higher and avoid having readers to calculate information manually.\n:::\n\n------------------------------------------------------------------------\n\n## 4. Improved Visualisation to EDA 1\n\n::: callout-note\n### *Revised codes by David Chiam* on EDA 1: Population by Age / Age Group\n\n### 4.1 Update to Data Preparation Prior to Plotting:\n\n✅ Treat `\"90_and_Over\"` **as part of Age = 90** (not missing, not removed).\\\n✅ Sum it into the population count for Age 90 — exactly like Liu Chih-Yuan's original \"Total Population by Age\" plot.\n\n✅ So in the final Plot A:\n\n-   **X-axis 0 to 90** with Age 90 representing both 90-year-olds **and above**. So that there is no weird gaps or missing data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Data Preparation ---\n\n# Correct Age handling: treat \"90_and_Over\" as Age 90\ndf <- df %>%\n  mutate(\n    AgeNum = ifelse(Age == \"90_and_Over\", 90, as.numeric(Age))\n  )\n\n# Summarise population by AgeNum for both Plots\ndf_age <- df %>%\n  group_by(AgeNum) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  mutate(\n    AgeGroup = case_when(\n      AgeNum <= 14 ~ \"Child (0–14)\",\n      AgeNum >= 15 & AgeNum <= 24 ~ \"Youth (15–24)\",\n      AgeNum >= 25 & AgeNum <= 64 ~ \"Adult (25–64)\",\n      AgeNum >= 65 ~ \"Senior (65+)\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\"Child (0–14)\", \"Youth (15–24)\", \"Adult (25–64)\", \"Senior (65+)\"))\n  )\n\n# Summarise by AgeGroup for Plot B\ndf_age_group <- df_age %>%\n  group_by(AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  mutate(\n    Perc = Pop / sum(Pop) * 100  # Calculate percentage\n  )\n```\n:::\n\n\n\n### **4.2 Improved Code for the Output Plots:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define color palette\nagegroup_colors <- c(\n  \"Child (0–14)\" = \"#8dd3c7\",\n  \"Youth (15–24)\" = \"#ffffb3\",\n  \"Adult (25–64)\" = \"#bebada\",\n  \"Senior (65+)\" = \"#fb8072\"\n)\n\n# --- Plot A: Total Population by Age ---\nplot_age <- ggplot(df_age, aes(x = AgeNum, y = Pop, fill = AgeGroup)) +\n  geom_col(color = \"grey30\", width = 0.9) +\n  scale_fill_manual(values = agegroup_colors) +\n  scale_x_continuous(breaks = seq(0, 90, by = 5)) +\n  scale_y_continuous(labels = scales::comma) +\n  labs(\n    title = \"Singapore Resident Population by Age\",\n    x = \"Age\", y = \"Population Count\",\n    fill = \"Age Group\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    axis.text = element_text(size = 8),\n    panel.grid.minor = element_blank(),\n    legend.position = \"none\"\n  )\n\n# --- Plot B: Population Composition by Age Group ---\nplot_agegroup <- ggplot(df_age_group, aes(x = AgeGroup, y = Perc, fill = AgeGroup)) +\n  geom_col(width = 0.5, color = \"grey20\") +\n  scale_fill_manual(values = agegroup_colors) +\n  scale_y_continuous(labels = function(x) paste0(x, \"%\")) +\n  coord_flip() +\n  # Label inside bar for Population Count\n  geom_text(aes(label = scales::comma(Pop)),\n            position = position_stack(vjust = 0.5),\n            color = \"black\", size = 3) +\n  # Label at end of bar for Percent\n  geom_text(aes(label = paste0(round(Perc, 1), \"%\"), y = Perc + 2),\n            hjust = 0, size = 3, color = \"grey30\") +\n  labs(\n    title = \"Population Composition by Age Group\",\n    x = \"Age Category\", y = NULL,\n    fill = \"Age Group\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    legend.position = \"bottom\",\n    legend.title = element_blank(),\n    legend.text = element_text(size = rel(0.7)),\n    axis.text.y = element_text(size = 8, face = \"bold\"),\n    axis.ticks.y = element_blank()\n  )\n\n# --- Final Combined Plot ---\n(plot_age) / (plot_agegroup) +\n  plot_layout(heights = c(2.0, 1.5))\n```\n\n::: {.cell-output-display}\n![](TakeHome_Ex01_LCY_files/figure-html/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n:::\n",
    "supporting": [
      "TakeHome_Ex01_LCY_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}