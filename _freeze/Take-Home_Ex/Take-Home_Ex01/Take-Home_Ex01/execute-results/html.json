{
  "hash": "80c75980271484bffe9f668a6d23760a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1\"\nauthor: \"David Chiam\"\ndescription: \"\"\ndate: \"1 May 2025\"\ndate-modified: \"3 May 2025\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n# **1. Overview**\n\n## **Setting the scene**\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on **demographic structures and distribution of Singapore in 2024**.\n\n## **Our task**\n\nIn this exercise, Exploratory Data Analysis (EDA) methods and ggplot functions are used to explore:\n\n1.  Need to write something here\n\n2.  and here\n\n# **2. Getting started, Data Loading and Preparation**\n\nThis section documents the process of preparing the dataset for analysis and visualization. It covers the loading of R packages, initial inspection of the dataset, and the necessary wrangling and transformation steps applied.\n\n### **2.1 Load required packages 📦**\n\nBefore importing the data, we load several R packages from the **tidyverse** ecosystem and supporting libraries for data wrangling and visualization. These packages streamline data processing and produce publication-ready plots using `ggplot2`. This setup ensure that we have both the flexibility and power to craft expressive, publication-quality demographic visualizations for the report.\n\n📌 **Summary of Package Roles**\n\n| Library | Description |\n|-------------------------|----------------------------------------------|\n| [**tidyverse**](https://www.tidyverse.org/) | A collection of core packages designed for data science, used extensively for data preparation and wrangling |\n| [**knitr**](https://yihui.org/knitr/) | Generates dynamic R markdown or Quarto reports |\n| [**patchwork**](https://patchwork.data-imaginist.com/) | Combine multiple ggplots into a single layout |\n| [**ggthemes**](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) | Provides extra themes (e.g. economist, wsj) |\n| [**scales**](https://scales.r-lib.org/) | For data/axes label formatting and annotations for ggplot2 |\n| [**ggtext**](https://wilkelab.org/ggtext/) | Supports improved and rich text rendering for ggplot2 |\n| [**ggalt**](https://yonicd.github.io/ggalt/) | A compendium of ‘geoms’, ‘coords’, ‘stats’, scales and fonts for ggplots2 |\n| [**ggridges**](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html) | For ridgeline plots that create the impression of a mountain range. They can be useful for visualising changes in distributions over time or space. |\n| [**ggpubr**](https://github.com/kassambara/ggpubr) | For publication-ready plots. |\n| [**ggextra**](https://github.com/daattali/ggExtra) | For adding marginal plots to ggplot2 |\n| [**cowplot**](https://github.com/wilkelab/cowplot) | Provides precise figure alignment and plot annotation |\n| [**ggnewscale**](https://eliocamp.github.io/ggnewscale/) | Enables multiple fill/colour scales in a single plot. For defining scales in ggplot2. |\n\nWe load the following R packages using the `pacman::p_load()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,     # Core data manipulation and ggplot2 plotting\n  knitr,         # Dynamic report generation and rendering\n  patchwork,     # Combines multiple ggplot2 plots\n  ggthemes,      # Additional themes and visual styles\n  scales,        # Formatting axes, scales, and labels\n  ggtext,        # Rich text formatting in ggplot titles/labels\n  ggalt,         # Dumbbell, lollipop, and other advanced geoms\n  ggridges,      # Ridgeline plots to visualize distributions\n  ggpubr,        # Publication-ready ggplot2 enhancements\n  ggExtra,       # Marginal plots for added insight\n  cowplot,       # Publication-quality figure alignment\n  ggnewscale     # Allows multiple color/fill scales in one ggplot\n)\n```\n:::\n\n\n### **2.2** Loading the Data and Taking a Glimpse of the Dataset **📂**\n\nThe dataset, *Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024*, published by the [Department of Statistics, Singapore (DOS)](https://www.singstat.gov.sg/) was loaded using the `read_csv()` function from the `readr` package in the tidyverse collection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the dataset\ndf <- read_csv(\"Dataset/respopagesex2024.csv\")\n```\n:::\n\n\nThe dataset contains **60,424 rows** and **6 columns**. Each row represents the count of residents for a specific combination of planning area, subzone, age, sex, and year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,424\nColumns: 6\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  <chr> \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  <chr> \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time <dbl> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n```\n\n\n:::\n:::\n\n\n🧾 **Variable Descriptions**\n\n| Column | Type | Description |\n|------------------|------------------------|------------------------------|\n| `PA` | Categorical | Planning Area (e.g., Ang Mo Kio, Bedok) |\n| `SZ` | Categorical | Subzone within each Planning Area |\n| `Age` | Categorical (to be converted) | Age in single years (e.g., 0–100+) |\n| `Sex` | Categorical | Gender: Male / Female |\n| `Pop` | Continuous (Integer) | Number of residents (rounded to nearest 10) |\n| `Time` | Identifier / Constant | Time period (always 2024 in this dataset) |\n\n### **2.3** **Wrangling, Cleaning & Transformation 🧹**\n\nTo ensure the data is ready for exploratory visualization and demographic analysis, a series of wrangling and transformation steps are applied. These steps are logically grouped and reusable across multiple visualization tasks.\n\n#### ✅ Convert **`Age`** to Integer\n\nThe `Age` column is stored as a character string (e.g., `\"100+\"`), which can prevent proper sorting, numeric comparisons, and calculations. I converted it to an integer, coercing `\"100+\"` to `100`, and remove any missing or malformed entries.\n\nThis step ensures that age values are usable in:\n\n-   Population pyramids\n-   Median age calculations\n-   Age band groupings\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(Age = as.integer(Age)) %>%  # Convert to numeric (100+ becomes NA)\n  drop_na(Age)                       # Remove missing values caused by conversion\n```\n:::\n\n\n#### ✅ Create `AgeBand` for Grouped Analysis\n\nWorking with 101 separate age values (0–100) may clutter visualizations and dilute insight. Therefore, I bin the ages into meaningful age bands for easier demographic comparison and comparative visualization. These age bands are especially helpful for:\n\n-   Grouped bar charts\n-   Age structure comparisons across planning areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(AgeBand = cut(Age,\n    breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55,\n               60, 65, 70, 75, 80, 85, 90, 95, 100, Inf),\n    labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n               \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\",\n               \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\",\n               \"80-84\", \"85-89\", \"90-94\", \"95-99\", \"100+\"),\n    right = FALSE))\n```\n:::\n\n\n#### ✅ Aggregate for Exploratory Plots & Key Insights\n\nThe data was group by Planning Area, Sex, and Age Band to prepare for visual comparisons across demographic segments. Using the code below, we can compute the **aggregated population totals** across:\n\n-   **Age × Sex**: for national pyramids\n-   **Planning Area**: for ranking and spatial comparisons\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For population pyramid (Age-Sex)\npyramid_data <- df %>%\n  group_by(Age, Sex) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\n# For top 5 planning areas\ntop5_pa <- df %>%\n  group_by(PA) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  slice_max(order_by = Pop, n = 5)\n```\n:::\n\n\n#### ✅ Add Region Classification Based on Planning Area\n\nTo enhance geographical analysis, we classify each Planning Area (`PA`) into one of Singapore’s five official regions (1) Central, (2) East, (3) North, (4) North-East, and (5) West. This grouping follows Singapore’s **Urban Redevelopment Authority (URA) Master Plan** and allows for cleaner regional comparisons, faceted plots, and high-level demographic summaries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(\n    PA = str_trim(str_to_upper(PA)),\n    Region = case_when(\n      PA %in% c(\"BISHAN\", \"BUKIT MERAH\", \"BUKIT TIMAH\", \"CENTRAL AREA\", \"DOWNTOWN CORE\",\n                \"GEYLANG\", \"KALLANG\", \"MARINA EAST\", \"MARINA SOUTH\", \"MUSEUM\", \"NEWTON\",\n                \"NOVENA\", \"ORCHARD\", \"OUTRAM\", \"PAYA LEBAR\", \"QUEENSTOWN\", \"RIVER VALLEY\",\n                \"ROCHOR\", \"SINGAPORE RIVER\", \"SOUTHERN ISLANDS\", \"STRAITS VIEW\", \"TANGLIN\",\n                \"TOA PAYOH\", \"MARINE PARADE\") ~ \"Central\",\n      PA %in% c(\"BEDOK\", \"CHANGI\", \"CHANGI BAY\", \"PASIR RIS\", \"TAMPINES\") ~ \"East\",\n      PA %in% c(\"CENTRAL WATER CATCHMENT\", \"MANDAI\", \"SEMBABWANG\", \"SIMPANG\",\n                \"SUNGEI KADUT\", \"WOODLANDS\", \"YISHUN\", \"SEMBAWANG\") ~ \"North\",\n      PA %in% c(\"ANG MO KIO\", \"HOUGANG\", \"NORTH-EASTERN ISLANDS\", \"PUNGGOL\",\n                \"SELETAR\", \"SENGKANG\", \"SERANGOON\") ~ \"North-East\",\n      PA %in% c(\"BOON LAY\", \"BUKIT BATOK\", \"BUKIT PANJANG\", \"CHOA CHU KANG\",\n                \"CLEMENTI\", \"JURONG EAST\", \"JURONG WEST\", \"LIM CHU KANG\",\n                \"PIONEER\", \"TENGAH\", \"TUAS\", \"WESTERN ISLANDS\",\n                \"WESTERN WATER CATCHMENT\") ~ \"West\",\n      TRUE ~ NA_character_\n    )\n  )\n```\n:::\n\n\n#### ✅ Compute the Weighted Median Age\n\nAs the simple median of the `Age` column would be misleading, as it treats each age as equally populated. Instead, we calculate a **weighted median** that reflects **actual population counts** per age to give a statistically more accurate median age for the **entire Singapore resident population**..\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_median <- df %>%\n  arrange(Age) %>%\n  mutate(\n    cum_pop = cumsum(Pop),\n    total_pop = sum(Pop)\n  ) %>%\n  filter(cum_pop >= total_pop / 2) %>%\n  slice(1)\n\nmedian_age <- df_median$Age\n```\n:::\n\n\n#### ✅ Create Aggregated Summary Table\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_summary <- df %>%\n  group_by(Region, PA, AgeBand, Sex) %>%\n  summarise(Total = sum(Pop), .groups = \"drop\")\n```\n:::\n\n\n# 3. Exploratory Data Analysis (EDA) 📊\n\n### 🔍 **3.1 What is the age and gender structure in the Singapore resident population?**\n\n**Goal**: Understand whether the population skews young or old, and whether the gender balance is even.\n\n**Method**: Population pyramids using mirrored horizontal bar charts, grouped by sex and age band.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## The Code Chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build national_pyramid with label fields\ntotal_pop <- sum(df_summary$Total)\n\nnational_pyramid <- df_summary %>%\n  mutate(Sex = factor(Sex, levels = c(\"Males\", \"Females\"))) %>%\n  group_by(AgeBand, Sex) %>%\n  summarise(Total = sum(Total), .groups = \"drop\") %>%\n  mutate(\n    Perc = Total / total_pop * 100,\n    Total = if_else(Sex == \"Males\", -Total, Total),\n    Label = paste0(round(Perc, 1), \"%\"),\n    hjust_pos = if_else(Sex == \"Males\", 1.1, -0.1)\n  )\n\n\n# Plot\nggplot(national_pyramid, \n       aes(x = AgeBand, y = Total, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_hline(yintercept = 0, color = \"black\") +\n  coord_flip() +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#ADD8E6\", \"Females\" = \"#FFC0CB\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  scale_y_continuous(\n    labels = function(x) comma(abs(x)),\n    breaks = scales::pretty_breaks(n = 6)\n  ) +\n  # Percentage labels with grey background\n  geom_label(aes(label = Label, y = 0, hjust = hjust_pos),\n             fill = \"grey90\", color = \"grey30\", size = 2, alpha = 0.65,\n             label.size = NA) +\n  labs(\n    title = \"Singapore Resident Population Pyramid (2024)\",\n    subtitle = \"Mirrored by Gender, Aggregated by Age Bands (with %)\",\n    y = \"Population\", x = \"Age Band\",\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"top\",\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 9),\n    plot.title = element_text(face = \"bold\", size = 14),\n    plot.subtitle = element_text(size = 10)\n  )\n```\n:::\n\n:::\n\n::: How-Does-it-Work\n![](/Images/Insights.png){width=\"42\"} [<strong>Insights gleamed from this plot</strong>]{style=\"font-size: 30px; vertical-align: middle;\"}\n\nThis population pyramid reveals the demographic structure of Singapore’s resident population as of June 2024. The mirrored horizontal bars clearly show that the population is ageing — with a substantial share concentrated in the 40–64 age bands. The gender distribution is broadly balanced across most age groups, although a higher proportion of females is observed in older age bands, reflecting longer female life expectancy. Younger cohorts (under 25) form a smaller share of the population, suggesting lower birth rates and potential long-term shrinkage of the working-age base. This age imbalance, combined with rising median age, has strategic implications for healthcare planning, social security, and labour force renewal. The pyramid’s symmetry and visual labeling facilitate quick interpretation, while the grey-backed percentage markers offer contextual understanding without clutter. Overall, the chart underscores the demographic transition toward an ageing population — a trend aligned with those of other developed urban nations.\n:::\n\n### 🔍 **3.2 How are age groups distributed across the five regions?**\n\n**Goal**: To explore the demographic composition across Singapore’s five regions using meaningful generational groupings, this visualisation compares the proportion of residents by age cohort. It addresses how youth, workforce, and senior populations differ geographically.\n\n**Method**: Using the 2024 DOS dataset, residents are grouped by region and classified into six age bands based on Singapore’s social-policy generations: *Alpha & Gen Z (0–24), Young Adults (25–34), Working Adults (35–54), Silver Generation (55–64), Merdeka Generation (65–74), and Pioneer Generation (75+)*. Percentages are calculated within each region and plotted using a colour-safe, perceptually consistent palette to enhance visual clarity and accessibility.\n\n::: panel-tabset\n## The Combined Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\nToggle to the other tabs to view the clearer version of each plot.\n\n## The Code Chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data prep with generation bands\ndf_generations <- df %>%\n  mutate(\n    AgeGroup = case_when(\n      Age <= 24 ~ \"Alpha & Gen Z (0-24)\",\n      Age <= 34 ~ \"Young Adults (25-34)\",\n      Age <= 54 ~ \"Working Adults (35-54)\",\n      Age <= 64 ~ \"Silver Generation (55-64)\",\n      Age <= 74 ~ \"Merdeka Generation (65-74)\",\n      TRUE ~ \"Pioneer Generation (>75)\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\n      \"Alpha & Gen Z (0-24)\",\n      \"Young Adults (25-34)\",\n      \"Working Adults (35-54)\",\n      \"Silver Generation (55-64)\",\n      \"Merdeka Generation (65-74)\",\n      \"Pioneer Generation (>75)\"\n    ))\n  ) %>%\n  group_by(Region, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  group_by(Region) %>%\n  mutate(Perc = Pop / sum(Pop) * 100)\n\n# --- Plot A: Count-based ---\nplot_counts <- ggplot(df_generations, aes(x = Region, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = comma(Pop)), position = position_stack(vjust = 0.5),\n            size = 2.2, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels\n  labs(\n    title = \"Population Count by Generation\",\n    subtitle = \"Total residents of each generation by region\",\n    x = NULL, y = NULL,\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.subtitle = element_text(size = 8)\n  )\n\n\n# --- Plot B: Percentage-based ---\nplot_perc <- ggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(Perc, 1), \"%\")),\n            position = position_stack(vjust = 0.5), size =2.2, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels\n  labs(\n    title = \"Population Share by Generation\",\n    subtitle = \"Proportion of each generation by region\",\n    x = NULL, y = NULL,\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.subtitle = element_text(size = 8),\n    legend.text = element_text(size = rel(0.7))  # 30% smaller\n  )\n\n# Combine plots\nplot_counts + plot_perc + plot_layout(guides = \"collect\") & \n  theme(legend.position = \"bottom\", legend.text = element_text(size = rel(0.7)))\n```\n:::\n\n## Population Count by Generation\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=1152}\n:::\n:::\n\n\n## Population Percentage by Generation\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=1152}\n:::\n:::\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\n\ndf_generations <- df %>%\n  mutate(\n    AgeGroup = case_when(\n      Age <= 24 ~ \"Alpha & Gen Z (0-24)\",\n      Age <= 34 ~ \"Young Adults (25-34)\",\n      Age <= 54 ~ \"Working Adults (35-54)\",\n      Age <= 64 ~ \"Silver Generation (55-64)\",\n      Age <= 74 ~ \"Merdeka Generation (65-74)\",\n      TRUE ~ \"Pioneer Generation (75+)\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\n      \"Alpha & Gen Z (0-24)\",\n      \"Young Adults (25-34)\",\n      \"Working Adults (35-54)\",\n      \"Silver Generation (55-64)\",\n      \"Merdeka Generation (65-74)\",\n      \"Pioneer Generation (75+)\"\n    ))\n  ) %>%\n  group_by(Region, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  group_by(Region) %>%\n  mutate(Perc = Pop / sum(Pop) * 100)\n\n# Plot - Use ColorBrewer's 'Set3' for soft pastel colors\nggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = paste0(round(Perc, 1), \"%\")),\n            position = position_stack(vjust = 0.5), size = 2.8, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  labs(\n    title = \"Population Composition by Generation Across Singapore Regions (2024)\",\n    subtitle = \"Using Generational Bands: Alpha to Pioneer\",\n    x = \"Region\", y = \"Percentage of Population\",\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\nlibrary(scales)\n\ndf_generations_count <- df %>%\n  mutate(\n    AgeGroup = case_when(\n      Age <= 24 ~ \"Alpha & Gen Z (0-24)\",\n      Age <= 34 ~ \"Young Adults (25-34)\",\n      Age <= 54 ~ \"Working Adults (35-54)\",\n      Age <= 64 ~ \"Silver Generation (55-64)\",\n      Age <= 74 ~ \"Merdeka Generation (65-74)\",\n      TRUE ~ \"Pioneer Generation (75+)\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\n      \"Alpha & Gen Z (0-24)\",\n      \"Young Adults (25-34)\",\n      \"Working Adults (35-54)\",\n      \"Silver Generation (55-64)\",\n      \"Merdeka Generation (65-74)\",\n      \"Pioneer Generation (75+)\"\n    ))\n  ) %>%\n  group_by(Region, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\")\n\n# Plot using count instead of percentage\nggplot(df_generations_count, aes(x = Region, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = comma(Pop)),\n            position = position_stack(vjust = 0.5), size = 2.8, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = comma) +\n  labs(\n    title = \"Resident Population by Generation Across Singapore Regions (2024)\",\n    subtitle = \"Counts grouped by generational bands from Alpha to Pioneer\",\n    x = \"Region\", y = \"Population Count\",\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(patchwork)\n\n# Prepare data with both counts and percentages\ndf_generations <- df %>%\n  mutate(\n    AgeGroup = case_when(\n      Age <= 24 ~ \"Alpha & Gen Z (0-24)\",\n      Age <= 34 ~ \"Young Adults (25-34)\",\n      Age <= 54 ~ \"Working Adults (35-54)\",\n      Age <= 64 ~ \"Silver Generation (55-64)\",\n      Age <= 74 ~ \"Merdeka Generation (65-74)\",\n      TRUE ~ \"Pioneer Generation (75+)\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\n      \"Alpha & Gen Z (0-24)\",\n      \"Young Adults (25-34)\",\n      \"Working Adults (35-54)\",\n      \"Silver Generation (55-64)\",\n      \"Merdeka Generation (65-74)\",\n      \"Pioneer Generation (75+)\"\n    ))\n  ) %>%\n  group_by(Region, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  group_by(Region) %>%\n  mutate(Perc = Pop / sum(Pop) * 100)\n\n# --- Plot A: Count-based ---\nplot_counts <- ggplot(df_generations, aes(x = Region, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = comma(Pop)),\n            position = position_stack(vjust = 0.5), size = 2.8, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = comma) +\n  labs(\n    title = \"Population Count by Generation\",\n    subtitle = \"Total residents per generation by region\",\n    x = \"Region\", y = \"Population\",\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# --- Plot B: Percentage-based ---\nplot_perc <- ggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = paste0(round(Perc, 1), \"%\")),\n            position = position_stack(vjust = 0.5), size = 2.8, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = function(x) paste0(x, \"%\")) +\n  labs(\n    title = \"Population Share by Generation\",\n    subtitle = \"Relative proportion of each generation in each region\",\n    x = \"Region\", y = \"Percentage\",\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Combine plots with unified bottom legend\nfinal_plot <- plot_counts + plot_perc + \n  plot_layout(guides = \"collect\") & \n  theme(\n    legend.position = \"bottom\",\n    legend.text = element_text(size = rel(0.7))  # Reduce font size by 30%\n  )\n\n# Print the final plot\nfinal_plot\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data prep with generation bands\ndf_generations <- df %>%\n  mutate(\n    AgeGroup = case_when(\n      Age <= 24 ~ \"Alpha & Gen Z (0-24)\",\n      Age <= 34 ~ \"Young Adults (25-34)\",\n      Age <= 54 ~ \"Working Adults (35-54)\",\n      Age <= 64 ~ \"Silver Generation (55-64)\",\n      Age <= 74 ~ \"Merdeka Generation (65-74)\",\n      TRUE ~ \"Pioneer Generation (>75)\"\n    ),\n    AgeGroup = factor(AgeGroup, levels = c(\n      \"Alpha & Gen Z (0-24)\",\n      \"Young Adults (25-34)\",\n      \"Working Adults (35-54)\",\n      \"Silver Generation (55-64)\",\n      \"Merdeka Generation (65-74)\",\n      \"Pioneer Generation (>75)\"\n    ))\n  ) %>%\n  group_by(Region, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  group_by(Region) %>%\n  mutate(Perc = Pop / sum(Pop) * 100)\n\n# --- Plot A: Count-based ---\nplot_counts <- ggplot(df_generations, aes(x = Region, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = comma(Pop)), position = position_stack(vjust = 0.5),\n            size = 2.2, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels\n  labs(\n    title = \"Population Count by Generation\",\n    subtitle = \"Total residents of each generation by region\",\n    x = NULL, y = NULL,\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.subtitle = element_text(size = 8)\n  )\n\n\n# --- Plot B: Percentage-based ---\nplot_perc <- ggplot(df_generations, aes(x = Region, y = Perc, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = paste0(round(Perc, 1), \"%\")),\n            position = position_stack(vjust = 0.5), size =2.2, color = \"black\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  scale_y_continuous(labels = NULL, breaks = NULL) +  # Remove y-axis labels\n  labs(\n    title = \"Population Share by Generation\",\n    subtitle = \"Proportion of each generation by region\",\n    x = NULL, y = NULL,\n    fill = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.subtitle = element_text(size = 8),\n    legend.text = element_text(size = rel(0.7))  # 30% smaller\n  )\n\n# Combine plots\nplot_counts + plot_perc + plot_layout(guides = \"collect\") & \n  theme(legend.position = \"bottom\", legend.text = element_text(size = rel(0.7)))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\npacman::p_load(ggplot2, dplyr, ggridges, stringr)\n\n# Step 1: Add Generation Band\ndf_gen <- df %>%\n  filter(!is.na(Region)) %>%\n  mutate(\n    Generation = case_when(\n      Age <= 24 ~ \"Alpha & Gen Z (0–24)\",\n      Age <= 34 ~ \"Young Adults (25–34)\",\n      Age <= 54 ~ \"Working Adults (35–54)\",\n      Age <= 64 ~ \"Silver Generation (55–64)\",\n      Age <= 74 ~ \"Merdeka Gen (65–74)\",\n      TRUE ~ \"Pioneer Gen (75+)\"\n    ),\n    Generation = factor(Generation, levels = c(\n      \"Alpha & Gen Z (0–24)\", \"Young Adults (25–34)\", \"Working Adults (35–54)\",\n      \"Silver Generation (55–64)\", \"Merdeka Gen (65–74)\", \"Pioneer Gen (75+)\"\n    ))\n  )\n\n# Step 2: Expand the population to simulate density (approximation)\ndf_ridge <- df_gen[rep(1:nrow(df_gen), df_gen$Pop %/% 10), ]\n\n# Step 3: Ridge plot – Age distribution per region, coloured by generation\nggplot(df_ridge, aes(x = Age, y = Region, fill = Generation)) +\n  geom_density_ridges(scale = 2, alpha = 0.8, rel_min_height = 0.01, color = \"white\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Distribution Across Regions (Ridge Plot)\",\n    subtitle = \"Population segments coloured by generation bands (2024)\",\n    x = \"Age\", y = \"Region\", fill = \"Generation\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14),\n    plot.subtitle = element_text(size = 10),\n    legend.position = \"top\"\n  )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n### 🔍 **3.3 Where are children (age 0–14) most concentrated?**\n\n**Goal**: Identify family-oriented areas for policy planning (schools, childcare).\n\n**Method**: Heatmap across Planning Area and Subzone using child population totals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_children <- df %>%\n  filter(Age < 15) %>%\n  group_by(PA, SZ) %>%\n  summarise(Children = sum(Pop), .groups = \"drop\")\n\nggplot(df_children, aes(x = reorder(SZ, Children), y = PA, fill = Children)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90)) +\n  labs(title = \"Child Population Density by Subzone\",\n       x = \"Subzone\", y = \"Planning Area\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### 🔍 **3.4 What is the elderly dependency ratio across planning areas?**\n\n**Goal**: Show where ageing populations might place pressure on the working-age base.\n\n**Method**: Compute and plot the ratio of elderly (65+) to working-age (20–64) residents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ratio <- df %>%\n  mutate(AgeGroup = case_when(\n    Age >= 65 ~ \"Elderly\",\n    Age >= 20 & Age < 65 ~ \"Working\",\n    TRUE ~ \"Other\"\n  )) %>%\n  group_by(PA, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  pivot_wider(names_from = AgeGroup, values_from = Pop) %>%\n  mutate(DependencyRatio = Elderly / Working)\n\nggplot(df_ratio, aes(x = reorder(PA, DependencyRatio), y = DependencyRatio)) +\n  geom_col(fill = \"darkred\") +\n  coord_flip() +\n  labs(title = \"Elderly Dependency Ratio by Planning Area\",\n       x = \"Planning Area\", y = \"Elderly per Working-age Resident\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 🔍 **3.5 Are there sex imbalances across age bands?**\n\n**Goal**: Detect unusual gender differences by age.\n\n**Method**: Line plots or bar charts of sex ratios by age band, faceted by region or large planning area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ratio_by_age <- df %>%\n  group_by(AgeBand, Sex) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  pivot_wider(names_from = Sex, values_from = Pop) %>%\n  mutate(SexRatio = Males / Females)\n\nggplot(df_ratio_by_age, aes(x = AgeBand, y = SexRatio, group = 1)) +\n  geom_line(color = \"steelblue\") +\n  geom_point() +\n  labs(title = \"Sex Ratio by Age Band (Males per Female)\",\n       x = \"Age Band\", y = \"Sex Ratio\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### 🔍 **3.6 Which subzones are the most densely populated?**\n\n**Goal**: Identify where population pressure may be most intense.\n\n**Method**: Bar chart or (if spatial data available) choropleth map of total population.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_subzone_pop <- df %>%\n  group_by(SZ) %>%\n  summarise(Pop = sum(Pop)) %>%\n  arrange(desc(Pop)) %>%\n  slice_head(n = 20)\n\nggplot(df_subzone_pop, aes(x = reorder(SZ, Pop), y = Pop)) +\n  geom_col(fill = \"darkblue\") +\n  coord_flip() +\n  labs(title = \"Top 20 Most Populated Subzones\", x = \"Subzone\", y = \"Population\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### 🔍 **3.7 What are the youngest vs oldest subzones?**\n\n**Goal**: Compare zones with the youngest and oldest resident median ages.\n\n**Method**: Dumbbell plot using median age per subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_median_age <- df %>%\n  group_by(SZ) %>%\n  summarise(MedianAge = median(Age, na.rm = TRUE)) %>%\n  arrange(MedianAge)\n\nyoungest <- df_median_age %>% slice_head(n = 10)\noldest <- df_median_age %>% slice_tail(n = 10)\n\ncombined <- bind_rows(youngest, oldest)\n\nggplot(combined, aes(x = reorder(SZ, MedianAge), y = MedianAge)) +\n  geom_point(color = \"darkgreen\", size = 3) +\n  coord_flip() +\n  labs(title = \"Top 10 Youngest and Oldest Subzones\",\n       x = \"Subzone\", y = \"Median Age\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load spatial packages\npacman::p_load(sf, ggplot2, tidyverse, viridis)\n\n# Read the planning area shapefile (GeoPackage or GeoJSON recommended)\nplanning_areas <- st_read(\"Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml\")  # or .shp/.geojson\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_PLNG_AREA_NO_SEA_PL' from data source \n  `D:\\OneDrive - Singapore Management University\\dchiamz2024\\ISSS608-VAA\\Take-Home_Ex\\Take-Home_Ex01\\Dataset\\MP19_PLANNING_AREA_NO_SEA_PL.kml' \n  using driver `KML'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Prepare population data: total by PA\npa_pop <- df %>%\n  group_by(PA) %>%\n  summarise(Pop = sum(Pop))\n\n# Ensure both PA names match exactly (some cleaning may be needed)\n# Join spatial and population data\nmap_data <- planning_areas %>%\n  left_join(pa_pop, by = c(\"Name\" = \"PA\"))  # Adjust column name if different\n\n# Plot\nggplot(map_data) +\n  geom_sf(aes(fill = Pop), color = \"white\") +\n  scale_fill_viridis_c(option = \"plasma\", trans = \"log\") +\n  labs(title = \"Population Distribution by Planning Area, Singapore (2024)\",\n       fill = \"Population\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\npacman::p_load(sf, ggplot2, tidyverse, viridis)\n\n# Read + fix shapefile\nplanning_areas <- st_read(\"Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml\") %>%\n  mutate(Name = str_trim(toupper(Name))) %>%\n  st_make_valid()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_PLNG_AREA_NO_SEA_PL' from data source \n  `D:\\OneDrive - Singapore Management University\\dchiamz2024\\ISSS608-VAA\\Take-Home_Ex\\Take-Home_Ex01\\Dataset\\MP19_PLANNING_AREA_NO_SEA_PL.kml' \n  using driver `KML'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Join and calculate density\nmap_data <- planning_areas %>%\n  left_join(pa_pop, by = c(\"Name\" = \"PA\")) %>%\n  mutate(area_km2 = as.numeric(st_area(geometry)) / 10^6,\n         density = Pop / area_km2)\n\n# Plot\nmap_plot <- ggplot(map_data) +\n  geom_sf(aes(fill = density), color = \"white\") +\n  geom_sf_text(aes(label = Name), size = 3) +\n  scale_fill_viridis_c(option = \"plasma\", trans = \"log\", na.value = \"grey90\") +\n  labs(title = \"Population Density by Planning Area (2024)\",\n       subtitle = \"Residents per square kilometre\",\n       fill = \"Density\\n(per km²)\") +\n  theme_void()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute median age (weighted)\ndf_ordered <- df %>%\n  arrange(Age) %>%\n  mutate(cum_pop = cumsum(Pop),\n         total_pop = sum(Pop)) %>%\n  filter(cum_pop >= total_pop / 2) %>%\n  slice(1)\n\nmedian_age <- df_ordered$Age\n\n# Population Pyramid Data\npyramid_data <- df %>%\n  group_by(Age, Sex) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  mutate(Pop = if_else(Sex == \"Males\", -Pop, Pop))\n\n# Top 5 Planning Areas\ntop5_pa <- df %>%\n  group_by(PA) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  slice_max(order_by = Pop, n = 5)\n\n# Plot 1: Population Pyramid\np1 <- ggplot(pyramid_data, aes(x = Pop, y = Age, fill = Sex)) +\n  geom_col(width = 1) +\n  geom_hline(yintercept = median_age, linetype = \"dashed\", color = \"black\", linewidth = 1) +\n  scale_x_continuous(labels = abs, name = \"Population\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title = \"Singapore Population Pyramid (2024)\",\n       subtitle = paste(\"Median Age:\", median_age)) +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n\n# Plot 2: Top 5 Planning Areas\np2 <- ggplot(top5_pa, aes(x = reorder(PA, Pop), y = Pop)) +\n  geom_col(fill = \"orchid\") +\n  coord_flip() +\n  labs(title = \"Top 5 Planning Areas by Population\",\n       x = \"Planning Area\", y = \"Population\") +\n  theme_minimal()\n\n# Combine using patchwork\np1 + p2 + plot_layout(widths = c(2, 1))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}