{
  "hash": "574f052c887a2205a45a82ac42c923a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1\"\nauthor: \"David Chiam\"\ndescription: \"\"\ndate: \"1 May 2025\"\ndate-modified: \"N.A.\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n# **1. Overview**\n\n## **Setting the scene**\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on **demographic structures and distribution of Singapore in 2024**.\n\n## **Our task**\n\nIn this exercise, Exploratory Data Analysis (EDA) methods and ggplot functions are used to explore:\n\n1.  Need to write something here\n\n2.  and here\n\n## **2. Getting started, Data Loading and Preparation**\n\nThis section documents the process of preparing the dataset for analysis and visualization. It covers the loading of R packages, initial inspection of the dataset, and the necessary wrangling and transformation steps applied.\n\n### **ðŸ“¦2.1 Load required packages**\n\nBefore importing the data, we load several R packages from the **tidyverse** ecosystem and supporting libraries for data wrangling and visualization. These packages streamline data processing and produce publication-ready plots using `ggplot2`. This setup ensure that we have both the flexibility and power to craft expressive, publication-quality demographic visualizations for the report.\n\nðŸ“Œ **Summary of Package Roles**\n\n| Library | Description |\n|---------------------|---------------------------------------------------|\n| [**tidyverse**](https://www.tidyverse.org/) | A collection of core packages designed for data science, used extensively for data preparation and wrangling |\n| [**knitr**](https://yihui.org/knitr/) | Generates dynamic R markdown or Quarto reports |\n| [**patchwork**](https://patchwork.data-imaginist.com/) | Combine multiple ggplots into a single layout |\n| [**ggthemes**](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) | Provides extra themes (e.g. economist, wsj) |\n| [**scales**](https://scales.r-lib.org/) | For data/axes label formatting and annotations for ggplot2 |\n| [**ggtext**](https://wilkelab.org/ggtext/) | Supports improved and rich text rendering for ggplot2 |\n| [**ggalt**](https://yonicd.github.io/ggalt/) | A compendium of â€˜geomsâ€™, â€˜coordsâ€™, â€˜statsâ€™, scales and fonts for ggplots2 |\n| [**ggridges**](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html) | For ridgeline plots that create the impression of a mountain range. They can be useful for visualising changes in distributions over time or space. |\n| [**ggpubr**](https://github.com/kassambara/ggpubr) | For publication-ready plots. |\n| [**ggextra**](https://github.com/daattali/ggExtra) | For adding marginal plots to ggplot2 |\n| [**cowplot**](https://github.com/wilkelab/cowplot) | Provides precise figure alignment and plot annotation |\n| [**ggnewscale**](https://eliocamp.github.io/ggnewscale/) | Enables multiple fill/colour scales in a single plot. For defining scales in ggplot2. |\n\nWe load the following R packages using the `pacman::p_load()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,     # Core data manipulation and ggplot2 plotting\n  knitr,         # Dynamic report generation and rendering\n  patchwork,     # Combines multiple ggplot2 plots\n  ggthemes,      # Additional themes and visual styles\n  scales,        # Formatting axes, scales, and labels\n  ggtext,        # Rich text formatting in ggplot titles/labels\n  ggalt,         # Dumbbell, lollipop, and other advanced geoms\n  ggridges,      # Ridgeline plots to visualize distributions\n  ggpubr,        # Publication-ready ggplot2 enhancements\n  ggExtra,       # Marginal plots for added insight\n  cowplot,       # Publication-quality figure alignment\n  ggnewscale     # Allows multiple color/fill scales in one ggplot\n)\n```\n:::\n\n\n### **ðŸ“‚ 2.2** Loading the Data and Taking a Glimpse of the Dataset\n\nThe dataset, *Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024*, published by the [Department of Statistics, Singapore (DOS)](https://www.singstat.gov.sg/) was loaded using the `read_csv()` function from the `readr` package in the tidyverse collection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the dataset\ndf <- read_csv(\"Dataset/respopagesex2024.csv\")\n```\n:::\n\n\nThe dataset contains **60,424 rows** and **6 columns**. Each row represents the count of residents for a specific combination of planning area, subzone, age, sex, and year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,424\nColumns: 6\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kâ€¦\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Tâ€¦\n$ Age  <chr> \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", â€¦\n$ Sex  <chr> \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Maleâ€¦\n$ Pop  <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3â€¦\n$ Time <dbl> 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,â€¦\n```\n\n\n:::\n:::\n\n\nðŸ§¾ **Variable Descriptions**\n\n| Column | Type | Description |\n|-----------|---------------------------|----------------------------------|\n| `PA` | Categorical | Planning Area (e.g., Ang Mo Kio, Bedok) |\n| `SZ` | Categorical | Subzone within each Planning Area |\n| `Age` | Categorical (to be converted) | Age in single years (e.g., 0â€“100+) |\n| `Sex` | Categorical | Gender: Male / Female |\n| `Pop` | Continuous (Integer) | Number of residents (rounded to nearest 10) |\n| `Time` | Identifier / Constant | Time period (always 2024 in this dataset) |\n\n### **ðŸ§¹2.3** **Wrangling, Cleaning & Transformation**\n\nSeveral data cleaning and transformation steps were applied to prepare the dataset for analysis and visualization:\n\n#### âœ… Convert **`Age`** to Integer \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(Age = as.integer(Age))\n```\n:::\n\n\n#### âœ… Create `AgeBand` for Grouped Analysis\n\nWe bin the ages into meaningful age bands for easier demographic comparison and visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(AgeBand = cut(Age,\n                       breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55,\n                                  60, 65, 70, 75, 80, 85, 90, 95, 100, Inf),\n                       labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n                                  \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\",\n                                  \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\",\n                                  \"80-84\", \"85-89\", \"90-94\", \"95-99\", \"100+\"),\n                       right = FALSE))\n```\n:::\n\n\n#### âœ… Aggregate for Exploratory Plots\n\nWe group by Planning Area, Sex, and Age Band to prepare for visual comparisons across demographic segments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_summary <- df %>%\n  group_by(PA, Sex, AgeBand) %>%\n  summarise(Total = sum(Pop), .groups = \"drop\")\n```\n:::\n\n\nThis `df_summary` table forms the basis for multiple exploratory visualizations in the next section.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example structure (actual filtering by PA can be added)\nggplot(df_summary %>% filter(PA == \"Ang Mo Kio\"), \n       aes(x = AgeBand, y = ifelse(Sex == \"Males\", -Total, Total), fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title = \"Population Pyramid: Ang Mo Kio\", y = \"Population\", x = \"Age Band\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npyramid <- df_summary %>%\n  filter(PA == \"ANG MO KIO\") %>%\n  ggplot(aes(x = AgeBand, y = ifelse(Sex == \"Males\", -Total, Total), fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title = \"Population Pyramid: Ang Mo Kio\", y = \"Population\", x = \"Age Band\") +\n  theme_minimal()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_5_areas <- df_summary %>%\n  group_by(PA) %>%\n  summarise(Pop = sum(Total)) %>%\n  slice_max(order_by = Pop, n = 5) %>%\n  pull(PA)\n\ndf_summary %>% \n  filter(PA %in% top_5_areas) %>%\n  ggplot(aes(x = AgeBand, y = Total, fill = Sex)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~ PA) +\n  theme_minimal() +\n  labs(title = \"Age Band Composition Across Top 5 Planning Areas\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_children <- df %>%\n  filter(Age < 15) %>%\n  group_by(PA, SZ) %>%\n  summarise(Children = sum(Pop), .groups = \"drop\")\n\nggplot(df_children, aes(x = reorder(SZ, Children), y = PA, fill = Children)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90)) +\n  labs(title = \"Child Population Density by Subzone\",\n       x = \"Subzone\", y = \"Planning Area\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ratio <- df %>%\n  mutate(AgeGroup = case_when(\n    Age >= 65 ~ \"Elderly\",\n    Age >= 20 & Age < 65 ~ \"Working\",\n    TRUE ~ \"Other\"\n  )) %>%\n  group_by(PA, AgeGroup) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  pivot_wider(names_from = AgeGroup, values_from = Pop) %>%\n  mutate(DependencyRatio = Elderly / Working)\n\nggplot(df_ratio, aes(x = reorder(PA, DependencyRatio), y = DependencyRatio)) +\n  geom_col(fill = \"darkred\") +\n  coord_flip() +\n  labs(title = \"Elderly Dependency Ratio by Planning Area\",\n       x = \"Planning Area\", y = \"Elderly per Working-age Resident\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ratio_by_age <- df %>%\n  group_by(AgeBand, Sex) %>%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %>%\n  pivot_wider(names_from = Sex, values_from = Pop) %>%\n  mutate(SexRatio = Males / Females)\n\nggplot(df_ratio_by_age, aes(x = AgeBand, y = SexRatio, group = 1)) +\n  geom_line(color = \"steelblue\") +\n  geom_point() +\n  labs(title = \"Sex Ratio by Age Band (Males per Female)\",\n       x = \"Age Band\", y = \"Sex Ratio\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_subzone_pop <- df %>%\n  group_by(SZ) %>%\n  summarise(Pop = sum(Pop)) %>%\n  arrange(desc(Pop)) %>%\n  slice_head(n = 20)\n\nggplot(df_subzone_pop, aes(x = reorder(SZ, Pop), y = Pop)) +\n  geom_col(fill = \"darkblue\") +\n  coord_flip() +\n  labs(title = \"Top 20 Most Populated Subzones\", x = \"Subzone\", y = \"Population\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_median_age <- df %>%\n  group_by(SZ) %>%\n  summarise(MedianAge = median(Age, na.rm = TRUE)) %>%\n  arrange(MedianAge)\n\nyoungest <- df_median_age %>% slice_head(n = 10)\noldest <- df_median_age %>% slice_tail(n = 10)\n\ncombined <- bind_rows(youngest, oldest)\n\nggplot(combined, aes(x = reorder(SZ, MedianAge), y = MedianAge)) +\n  geom_point(color = \"darkgreen\", size = 3) +\n  coord_flip() +\n  labs(title = \"Top 10 Youngest and Oldest Subzones\",\n       x = \"Subzone\", y = \"Median Age\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load spatial packages\npacman::p_load(sf, ggplot2, tidyverse, viridis)\n\n# Read the planning area shapefile (GeoPackage or GeoJSON recommended)\nplanning_areas <- st_read(\"Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml\")  # or .shp/.geojson\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_PLNG_AREA_NO_SEA_PL' from data source \n  `D:\\OneDrive - Singapore Management University\\dchiamz2024\\ISSS608-VAA\\Take-Home_Ex\\Take-Home_Ex01\\Dataset\\MP19_PLANNING_AREA_NO_SEA_PL.kml' \n  using driver `KML'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Prepare population data: total by PA\npa_pop <- df %>%\n  group_by(PA) %>%\n  summarise(Pop = sum(Pop))\n\n# Ensure both PA names match exactly (some cleaning may be needed)\n# Join spatial and population data\nmap_data <- planning_areas %>%\n  left_join(pa_pop, by = c(\"Name\" = \"PA\"))  # Adjust column name if different\n\n# Plot\nggplot(map_data) +\n  geom_sf(aes(fill = Pop), color = \"white\") +\n  scale_fill_viridis_c(option = \"plasma\", trans = \"log\") +\n  labs(title = \"Population Distribution by Planning Area, Singapore (2024)\",\n       fill = \"Population\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\npacman::p_load(sf, ggplot2, tidyverse, viridis)\n\n# Read + fix shapefile\nplanning_areas <- st_read(\"Dataset/MP19_PLANNING_AREA_NO_SEA_PL.kml\") %>%\n  mutate(Name = str_trim(toupper(Name))) %>%\n  st_make_valid()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_PLNG_AREA_NO_SEA_PL' from data source \n  `D:\\OneDrive - Singapore Management University\\dchiamz2024\\ISSS608-VAA\\Take-Home_Ex\\Take-Home_Ex01\\Dataset\\MP19_PLANNING_AREA_NO_SEA_PL.kml' \n  using driver `KML'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Join and calculate density\nmap_data <- planning_areas %>%\n  left_join(pa_pop, by = c(\"Name\" = \"PA\")) %>%\n  mutate(area_km2 = as.numeric(st_area(geometry)) / 10^6,\n         density = Pop / area_km2)\n\n# Plot\nmap_plot <- ggplot(map_data) +\n  geom_sf(aes(fill = density), color = \"white\") +\n  geom_sf_text(aes(label = Name), size = 3) +\n  scale_fill_viridis_c(option = \"plasma\", trans = \"log\", na.value = \"grey90\") +\n  labs(title = \"Population Density by Planning Area (2024)\",\n       subtitle = \"Residents per square kilometre\",\n       fill = \"Density\\n(per kmÂ²)\") +\n  theme_void()\n```\n:::\n\n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}