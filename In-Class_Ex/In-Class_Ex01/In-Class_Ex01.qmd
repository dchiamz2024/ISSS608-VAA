---
title: "In-Class Exercise 1"
description: ""
author: "David Chiam"
date: "17 May 2025"
date-modified: "17 May 2025"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

In the code chunk below, p_load() of pacman package is used to load the R packages into R environment.

```{r}

pacman::p_load(tidyverse, 
               jsonlite, 
               SmartEDA, 
               tidygraph,
               ggraph
               )
```

```{r}
kg <- fromJSON("Data/mc1_graph.json")

```

### Inspect Structure

```{r}
str(kg, max.level = 1)

```

### Extract and Inspect

```{r}
nodes_tb1 <- as_tibble(kg$nodes)
edges_tb1 <- as_tibble(kg$links)
```

## Initial EDA

```{r}
ggplot(data = edges_tb1,
       aes(y = `Edge Type`)) + 
  geom_bar()
```

```{r}
ggplot(data = nodes_tb1,
       aes(y = `Node Type`)) + 
  geom_bar()
```

## Creating Knowledge Graph

This is

### Step 1: Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes_tb1$id,
                 index = seq_len(nrow(nodes_tb1)))
```

This ensures each id from your node list is mapped to the correct row number.

### Step 2: Map source and target IDs to row indices

```{r}
edges_tb1 <- edges_tb1 %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)

```

### Step 3: Filter out any unmatched (invalid) edges

```{r}
edges_tb1 <- edges_tb1 %>%
  filter(!is.na(from), !is.na(to))

```

### Step 4: Creating the graph

Lastly, `tbl_grpah()` is used to create tidygraph's graph object by using the code chunk below.

```{r}
graph <- tbl_graph(nodes = nodes_tb1,
                   edges = edges_tb1,
                   directed = kg$directed)
```

## Visualising the knowledge graph

```{r}
set.seed(1234)

```

### Visualising the whole Graph

```{r}
#| eval: false

ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3,
                colour = "gray") +
  geom_node_point(aes(colour = `Node Type`),
                  size = 4)+
  geom_node_text(aes(label = name),
                repel = TRUE,
                size = 2.5) +
  theme_void()
```

### Visualising the sub-graph

In this section, we are interested to create a sub-graph based on \*Memberof\* value in *Edge Type* column of the *edges* data frame.

#### Step 1: Filter edges to only "Memberof"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")

```

#### Step 2: Extract only connected nodes (i.e., used in these edges)

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()

```

#### Step 3: Keep only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)    # optional cleanup

```

#### Plot the sub-graph

```{r}
ggraph(graph_memberof,
       layout = "fr") +
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(colour = `Node Type`),
                  size = 1)+
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```
